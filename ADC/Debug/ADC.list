
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c3c  08004c3c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c3c  08004c3c  00005c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c44  08004c44  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c48  08004c48  00005c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000025c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac9d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001828  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00012558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000635  00000000  00000000  00012d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208e1  00000000  00000000  00013395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3a7  00000000  00000000  00033c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9404  00000000  00000000  0004001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109421  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002508  00000000  00000000  00109464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000035  00000000  00000000  0010b96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ba8 	.word	0x08004ba8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004ba8 	.word	0x08004ba8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 faf6 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f846 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f942 	bl	8000524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f910 	bl	80004c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a4:	f000 f89e 	bl	80003e4 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start (&hadc1); //Start the ADC on STM32
 80002a8:	481a      	ldr	r0, [pc, #104]	@ (8000314 <main+0x84>)
 80002aa:	f000 fd6f 	bl	8000d8c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20); //Pull data for ADC from STM32
 80002ae:	2114      	movs	r1, #20
 80002b0:	4818      	ldr	r0, [pc, #96]	@ (8000314 <main+0x84>)
 80002b2:	f000 fe81 	bl	8000fb8 <HAL_ADC_PollForConversion>
	  lux = HAL_ADC_GetValue(&hadc1); //After getting ADC from channel 1 -> lux will be the place used to store the value of ADC
 80002b6:	4817      	ldr	r0, [pc, #92]	@ (8000314 <main+0x84>)
 80002b8:	f000 ff80 	bl	80011bc <HAL_ADC_GetValue>
 80002bc:	4603      	mov	r3, r0
 80002be:	b29a      	uxth	r2, r3
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <main+0x88>)
 80002c2:	801a      	strh	r2, [r3, #0]
	  sprintf(msg,"Light: %hu \r\n", lux); //Store lux into msg
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <main+0x88>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4914      	ldr	r1, [pc, #80]	@ (800031c <main+0x8c>)
 80002cc:	4814      	ldr	r0, [pc, #80]	@ (8000320 <main+0x90>)
 80002ce:	f003 ffcb 	bl	8004268 <siprintf>
	  HAL_UART_Transmit (&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY); //Print output to standard monitor
 80002d2:	4813      	ldr	r0, [pc, #76]	@ (8000320 <main+0x90>)
 80002d4:	f7ff ff84 	bl	80001e0 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	490f      	ldr	r1, [pc, #60]	@ (8000320 <main+0x90>)
 80002e2:	4810      	ldr	r0, [pc, #64]	@ (8000324 <main+0x94>)
 80002e4:	f003 fb46 	bl	8003974 <HAL_UART_Transmit>

	  if (lux<800){
 80002e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <main+0x88>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80002f0:	d206      	bcs.n	8000300 <main+0x70>
		  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2180      	movs	r1, #128	@ 0x80
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fa:	f001 fe83 	bl	8002004 <HAL_GPIO_WritePin>
 80002fe:	e005      	b.n	800030c <main+0x7c>
	  } else {
		  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2180      	movs	r1, #128	@ 0x80
 8000304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000308:	f001 fe7c 	bl	8002004 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 800030c:	2064      	movs	r0, #100	@ 0x64
 800030e:	f000 fb1f 	bl	8000950 <HAL_Delay>
	  HAL_ADC_Start (&hadc1); //Start the ADC on STM32
 8000312:	e7c9      	b.n	80002a8 <main+0x18>
 8000314:	20000078 	.word	0x20000078
 8000318:	20000150 	.word	0x20000150
 800031c:	08004bc0 	.word	0x08004bc0
 8000320:	20000154 	.word	0x20000154
 8000324:	200000c8 	.word	0x200000c8

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b0a6      	sub	sp, #152	@ 0x98
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000332:	2228      	movs	r2, #40	@ 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 ffb8 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2258      	movs	r2, #88	@ 0x58
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 ffaa 	bl	80042ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	2302      	movs	r3, #2
 800035a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2310      	movs	r3, #16
 8000362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000374:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fe54 	bl	8002034 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f92d 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fe62 	bl	800307c <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003be:	f000 f917 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4618      	mov	r0, r3
 80003ce:	f003 f867 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003d8:	f000 f90a 	bl	80005f0 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3798      	adds	r7, #152	@ 0x98
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	@ 0x28
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000406:	4b2e      	ldr	r3, [pc, #184]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000408:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000410:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800042a:	2200      	movs	r2, #0
 800042c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000430:	4b23      	ldr	r3, [pc, #140]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000436:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000438:	2201      	movs	r2, #1
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000442:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000444:	2201      	movs	r2, #1
 8000446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000448:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800044a:	2200      	movs	r2, #0
 800044c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000452:	2204      	movs	r2, #4
 8000454:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000456:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000458:	2200      	movs	r2, #0
 800045a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800045e:	2200      	movs	r2, #0
 8000460:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000462:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 8000464:	f000 fa98 	bl	8000998 <HAL_ADC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800046e:	f000 f8bf 	bl	80005f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	4619      	mov	r1, r3
 800047c:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 800047e:	f001 f995 	bl	80017ac <HAL_ADCEx_MultiModeConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000488:	f000 f8b2 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048c:	2301      	movs	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	2301      	movs	r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <MX_ADC1_Init+0xdc>)
 80004aa:	f000 fe95 	bl	80011d8 <HAL_ADC_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004b4:	f000 f89c 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	@ 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000078 	.word	0x20000078

080004c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c8:	4b14      	ldr	r3, [pc, #80]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004ca:	4a15      	ldr	r2, [pc, #84]	@ (8000520 <MX_USART2_UART_Init+0x5c>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ce:	4b13      	ldr	r3, [pc, #76]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_USART2_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_USART2_UART_Init+0x58>)
 8000508:	f003 f9e6 	bl	80038d8 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000512:	f000 f86d 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000c8 	.word	0x200000c8
 8000520:	40004400 	.word	0x40004400

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	@ 0x28
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b2b      	ldr	r3, [pc, #172]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a2a      	ldr	r2, [pc, #168]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a24      	ldr	r2, [pc, #144]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000558:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1e      	ldr	r2, [pc, #120]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <MX_GPIO_Init+0xc4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	21a0      	movs	r1, #160	@ 0xa0
 800059e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a2:	f001 fd2f 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <MX_GPIO_Init+0xc8>)
 80005be:	f001 fb97 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005dc:	f001 fb88 	bl	8001cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	@ 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000800 	.word	0x48000800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <Error_Handler+0x8>

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000632:	2007      	movs	r0, #7
 8000634:	f001 fb28 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000664:	d124      	bne.n	80006b0 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a13      	ldr	r2, [pc, #76]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <HAL_ADC_MspInit+0x74>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f001 fb20 	bl	8001cf0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <HAL_UART_MspInit+0x7c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d128      	bne.n	8000730 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <HAL_UART_MspInit+0x80>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <HAL_UART_MspInit+0x80>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_UART_MspInit+0x80>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <HAL_UART_MspInit+0x80>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a10      	ldr	r2, [pc, #64]	@ (800073c <HAL_UART_MspInit+0x80>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <HAL_UART_MspInit+0x80>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800070e:	230c      	movs	r3, #12
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800071e:	2307      	movs	r3, #7
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f001 fae0 	bl	8001cf0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	@ 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40004400 	.word	0x40004400
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 f8bb 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f003 fd74 	bl	80042bc <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20010000 	.word	0x20010000
 8000800:	00000400 	.word	0x00000400
 8000804:	20000168 	.word	0x20000168
 8000808:	200002b8 	.word	0x200002b8

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000868 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff ffea 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f003 fd33 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000862:	f7ff fd15 	bl	8000290 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000874:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 8000878:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800087c:	200002b8 	.word	0x200002b8

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f001 f9f7 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff feac 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fa01 	bl	8001cd6 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f001 f9d7 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	2000016c 	.word	0x2000016c

08000938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;  
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	2000016c 	.word	0x2000016c

08000950 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09a      	sub	sp, #104	@ 0x68
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e1e3      	b.n	8000d80 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d176      	bne.n	8000ab8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d152      	bne.n	8000a78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fe29 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d13b      	bne.n	8000a78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f001 f829 	bl	8001a58 <ADC_Disable>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d12f      	bne.n	8000a78 <HAL_ADC_Init+0xe0>
 8000a18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12b      	bne.n	8000a78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a28:	f023 0302 	bic.w	r3, r3, #2
 8000a2c:	f043 0202 	orr.w	r2, r3, #2
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a54:	4b92      	ldr	r3, [pc, #584]	@ (8000ca0 <HAL_ADC_Init+0x308>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a92      	ldr	r2, [pc, #584]	@ (8000ca4 <HAL_ADC_Init+0x30c>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9a      	lsrs	r2, r3, #18
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a6a:	e002      	b.n	8000a72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f9      	bne.n	8000a6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a94:	d110      	bne.n	8000ab8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f023 0312 	bic.w	r3, r3, #18
 8000a9e:	f043 0210 	orr.w	r2, r3, #16
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f043 0201 	orr.w	r2, r3, #1
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f040 8150 	bne.w	8000d66 <HAL_ADC_Init+0x3ce>
 8000ac6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 814b 	bne.w	8000d66 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8143 	bne.w	8000d66 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000af8:	d004      	beq.n	8000b04 <HAL_ADC_Init+0x16c>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a6a      	ldr	r2, [pc, #424]	@ (8000ca8 <HAL_ADC_Init+0x310>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d101      	bne.n	8000b08 <HAL_ADC_Init+0x170>
 8000b04:	4b69      	ldr	r3, [pc, #420]	@ (8000cac <HAL_ADC_Init+0x314>)
 8000b06:	e000      	b.n	8000b0a <HAL_ADC_Init+0x172>
 8000b08:	4b69      	ldr	r3, [pc, #420]	@ (8000cb0 <HAL_ADC_Init+0x318>)
 8000b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b14:	d102      	bne.n	8000b1c <HAL_ADC_Init+0x184>
 8000b16:	4b64      	ldr	r3, [pc, #400]	@ (8000ca8 <HAL_ADC_Init+0x310>)
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e01a      	b.n	8000b52 <HAL_ADC_Init+0x1ba>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a61      	ldr	r2, [pc, #388]	@ (8000ca8 <HAL_ADC_Init+0x310>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d103      	bne.n	8000b2e <HAL_ADC_Init+0x196>
 8000b26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e011      	b.n	8000b52 <HAL_ADC_Init+0x1ba>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a60      	ldr	r2, [pc, #384]	@ (8000cb4 <HAL_ADC_Init+0x31c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d102      	bne.n	8000b3e <HAL_ADC_Init+0x1a6>
 8000b38:	4b5f      	ldr	r3, [pc, #380]	@ (8000cb8 <HAL_ADC_Init+0x320>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e009      	b.n	8000b52 <HAL_ADC_Init+0x1ba>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a5d      	ldr	r2, [pc, #372]	@ (8000cb8 <HAL_ADC_Init+0x320>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d102      	bne.n	8000b4e <HAL_ADC_Init+0x1b6>
 8000b48:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb4 <HAL_ADC_Init+0x31c>)
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e001      	b.n	8000b52 <HAL_ADC_Init+0x1ba>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d108      	bne.n	8000b72 <HAL_ADC_Init+0x1da>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Init+0x1da>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <HAL_ADC_Init+0x1dc>
 8000b72:	2300      	movs	r3, #0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11c      	bne.n	8000bb2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d010      	beq.n	8000ba0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <HAL_ADC_Init+0x202>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_Init+0x202>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <HAL_ADC_Init+0x204>
 8000b9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d108      	bne.n	8000bb2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bb0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7e5b      	ldrb	r3, [r3, #25]
 8000bb6:	035b      	lsls	r3, r3, #13
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d002      	beq.n	8000bc6 <HAL_ADC_Init+0x22e>
 8000bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bc4:	e000      	b.n	8000bc8 <HAL_ADC_Init+0x230>
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d11b      	bne.n	8000c1e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7e5b      	ldrb	r3, [r3, #25]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d109      	bne.n	8000c02 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	045a      	lsls	r2, r3, #17
 8000bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c00:	e00d      	b.n	8000c1e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000c0a:	f043 0220 	orr.w	r2, r3, #32
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f043 0201 	orr.w	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d054      	beq.n	8000cd0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_ADC_Init+0x31c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d004      	beq.n	8000c3a <HAL_ADC_Init+0x2a2>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a20      	ldr	r2, [pc, #128]	@ (8000cb8 <HAL_ADC_Init+0x320>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d140      	bne.n	8000cbc <HAL_ADC_Init+0x324>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000c42:	d02a      	beq.n	8000c9a <HAL_ADC_Init+0x302>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c4c:	d022      	beq.n	8000c94 <HAL_ADC_Init+0x2fc>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c52:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000c56:	d01a      	beq.n	8000c8e <HAL_ADC_Init+0x2f6>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000c60:	d012      	beq.n	8000c88 <HAL_ADC_Init+0x2f0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c66:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000c6a:	d00a      	beq.n	8000c82 <HAL_ADC_Init+0x2ea>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c70:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000c74:	d002      	beq.n	8000c7c <HAL_ADC_Init+0x2e4>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c7a:	e023      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c80:	e020      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c82:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c86:	e01d      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c88:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c8c:	e01a      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c92:	e017      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c94:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000c98:	e014      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000c9a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000c9e:	e011      	b.n	8000cc4 <HAL_ADC_Init+0x32c>
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	50000100 	.word	0x50000100
 8000cac:	50000300 	.word	0x50000300
 8000cb0:	50000700 	.word	0x50000700
 8000cb4:	50000400 	.word	0x50000400
 8000cb8:	50000500 	.word	0x50000500
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d114      	bne.n	8000d08 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cec:	f023 0302 	bic.w	r3, r3, #2
 8000cf0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7e1b      	ldrb	r3, [r3, #24]
 8000cf6:	039a      	lsls	r2, r3, #14
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4313      	orrs	r3, r2
 8000d02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d04:	4313      	orrs	r3, r2
 8000d06:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_ADC_Init+0x3f0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10c      	bne.n	8000d3e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f023 010f 	bic.w	r1, r3, #15
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d3c:	e007      	b.n	8000d4e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020f 	bic.w	r2, r2, #15
 8000d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d64:	e00a      	b.n	8000d7c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f023 0312 	bic.w	r3, r3, #18
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3768      	adds	r7, #104	@ 0x68
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	fff0c007 	.word	0xfff0c007

08000d8c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80f9 	bne.w	8000f9a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Start+0x2a>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e0f4      	b.n	8000fa0 <HAL_ADC_Start+0x214>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fde6 	bl	8001990 <ADC_Enable>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 80e0 	bne.w	8000f90 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dec:	d004      	beq.n	8000df8 <HAL_ADC_Start+0x6c>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a6d      	ldr	r2, [pc, #436]	@ (8000fa8 <HAL_ADC_Start+0x21c>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d106      	bne.n	8000e06 <HAL_ADC_Start+0x7a>
 8000df8:	4b6c      	ldr	r3, [pc, #432]	@ (8000fac <HAL_ADC_Start+0x220>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 031f 	and.w	r3, r3, #31
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d010      	beq.n	8000e26 <HAL_ADC_Start+0x9a>
 8000e04:	e005      	b.n	8000e12 <HAL_ADC_Start+0x86>
 8000e06:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb0 <HAL_ADC_Start+0x224>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d009      	beq.n	8000e26 <HAL_ADC_Start+0x9a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d004      	beq.n	8000e26 <HAL_ADC_Start+0x9a>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a64      	ldr	r2, [pc, #400]	@ (8000fb4 <HAL_ADC_Start+0x228>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d115      	bne.n	8000e52 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d036      	beq.n	8000eae <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e50:	e02d      	b.n	8000eae <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e66:	d004      	beq.n	8000e72 <HAL_ADC_Start+0xe6>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa8 <HAL_ADC_Start+0x21c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10a      	bne.n	8000e88 <HAL_ADC_Start+0xfc>
 8000e72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e008      	b.n	8000e9a <HAL_ADC_Start+0x10e>
 8000e88:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb4 <HAL_ADC_Start+0x228>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ea6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eba:	d106      	bne.n	8000eca <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec0:	f023 0206 	bic.w	r2, r3, #6
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ec8:	e002      	b.n	8000ed0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	221c      	movs	r2, #28
 8000ede:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ee8:	d004      	beq.n	8000ef4 <HAL_ADC_Start+0x168>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa8 <HAL_ADC_Start+0x21c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d106      	bne.n	8000f02 <HAL_ADC_Start+0x176>
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <HAL_ADC_Start+0x220>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d03e      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f00:	e005      	b.n	8000f0e <HAL_ADC_Start+0x182>
 8000f02:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_ADC_Start+0x224>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d037      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f16:	d004      	beq.n	8000f22 <HAL_ADC_Start+0x196>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <HAL_ADC_Start+0x21c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d106      	bne.n	8000f30 <HAL_ADC_Start+0x1a4>
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <HAL_ADC_Start+0x220>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d027      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f2e:	e005      	b.n	8000f3c <HAL_ADC_Start+0x1b0>
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <HAL_ADC_Start+0x224>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d020      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f44:	d004      	beq.n	8000f50 <HAL_ADC_Start+0x1c4>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <HAL_ADC_Start+0x21c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <HAL_ADC_Start+0x1d2>
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <HAL_ADC_Start+0x220>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	2b09      	cmp	r3, #9
 8000f5a:	d010      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f5c:	e005      	b.n	8000f6a <HAL_ADC_Start+0x1de>
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_ADC_Start+0x224>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	2b09      	cmp	r3, #9
 8000f68:	d009      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f72:	d004      	beq.n	8000f7e <HAL_ADC_Start+0x1f2>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_ADC_Start+0x228>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10f      	bne.n	8000f9e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0204 	orr.w	r2, r2, #4
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	e006      	b.n	8000f9e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000f98:	e001      	b.n	8000f9e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50000100 	.word	0x50000100
 8000fac:	50000300 	.word	0x50000300
 8000fb0:	50000700 	.word	0x50000700
 8000fb4:	50000400 	.word	0x50000400

08000fb8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d102      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e03a      	b.n	800104a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fdc:	d004      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0x30>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a72      	ldr	r2, [pc, #456]	@ (80011ac <HAL_ADC_PollForConversion+0x1f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_PollForConversion+0x34>
 8000fe8:	4b71      	ldr	r3, [pc, #452]	@ (80011b0 <HAL_ADC_PollForConversion+0x1f8>)
 8000fea:	e000      	b.n	8000fee <HAL_ADC_PollForConversion+0x36>
 8000fec:	4b71      	ldr	r3, [pc, #452]	@ (80011b4 <HAL_ADC_PollForConversion+0x1fc>)
 8000fee:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d112      	bne.n	8001022 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11d      	bne.n	8001046 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f043 0220 	orr.w	r2, r3, #32
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e0bf      	b.n	80011a2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f043 0220 	orr.w	r2, r3, #32
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0ad      	b.n	80011a2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001046:	230c      	movs	r3, #12
 8001048:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001052:	d004      	beq.n	800105e <HAL_ADC_PollForConversion+0xa6>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a54      	ldr	r2, [pc, #336]	@ (80011ac <HAL_ADC_PollForConversion+0x1f4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d106      	bne.n	800106c <HAL_ADC_PollForConversion+0xb4>
 800105e:	4b54      	ldr	r3, [pc, #336]	@ (80011b0 <HAL_ADC_PollForConversion+0x1f8>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	2b00      	cmp	r3, #0
 8001068:	d010      	beq.n	800108c <HAL_ADC_PollForConversion+0xd4>
 800106a:	e005      	b.n	8001078 <HAL_ADC_PollForConversion+0xc0>
 800106c:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <HAL_ADC_PollForConversion+0x1fc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	2b00      	cmp	r3, #0
 8001076:	d009      	beq.n	800108c <HAL_ADC_PollForConversion+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001080:	d004      	beq.n	800108c <HAL_ADC_PollForConversion+0xd4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a4c      	ldr	r2, [pc, #304]	@ (80011b8 <HAL_ADC_PollForConversion+0x200>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d104      	bne.n	8001096 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e00f      	b.n	80010b6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109e:	d004      	beq.n	80010aa <HAL_ADC_PollForConversion+0xf2>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a41      	ldr	r2, [pc, #260]	@ (80011ac <HAL_ADC_PollForConversion+0x1f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d102      	bne.n	80010b0 <HAL_ADC_PollForConversion+0xf8>
 80010aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010ae:	e000      	b.n	80010b2 <HAL_ADC_PollForConversion+0xfa>
 80010b0:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <HAL_ADC_PollForConversion+0x200>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010b6:	f7ff fc3f 	bl	8000938 <HAL_GetTick>
 80010ba:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010bc:	e021      	b.n	8001102 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d01d      	beq.n	8001102 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_ADC_PollForConversion+0x124>
 80010cc:	f7ff fc34 	bl	8000938 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d212      	bcs.n	8001102 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f043 0204 	orr.w	r2, r3, #4
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e04f      	b.n	80011a2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0d6      	beq.n	80010be <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001126:	2b00      	cmp	r3, #0
 8001128:	d131      	bne.n	800118e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001130:	2b00      	cmp	r3, #0
 8001132:	d12c      	bne.n	800118e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b08      	cmp	r3, #8
 8001140:	d125      	bne.n	800118e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d112      	bne.n	8001176 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d112      	bne.n	800118e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	641a      	str	r2, [r3, #64]	@ 0x40
 8001174:	e00b      	b.n	800118e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f043 0220 	orr.w	r2, r3, #32
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	50000100 	.word	0x50000100
 80011b0:	50000300 	.word	0x50000300
 80011b4:	50000700 	.word	0x50000700
 80011b8:	50000400 	.word	0x50000400

080011bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d8:	b480      	push	{r7}
 80011da:	b09b      	sub	sp, #108	@ 0x6c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x22>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e2c8      	b.n	800178c <HAL_ADC_ConfigChannel+0x5b4>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 82ac 	bne.w	800176a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d81c      	bhi.n	8001254 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	231f      	movs	r3, #31
 8001230:	4093      	lsls	r3, r2
 8001232:	43db      	mvns	r3, r3
 8001234:	4019      	ands	r1, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	631a      	str	r2, [r3, #48]	@ 0x30
 8001252:	e063      	b.n	800131c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b09      	cmp	r3, #9
 800125a:	d81e      	bhi.n	800129a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	3b1e      	subs	r3, #30
 8001270:	221f      	movs	r2, #31
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	4019      	ands	r1, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	3b1e      	subs	r3, #30
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
 8001298:	e040      	b.n	800131c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b0e      	cmp	r3, #14
 80012a0:	d81e      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	3b3c      	subs	r3, #60	@ 0x3c
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3b3c      	subs	r3, #60	@ 0x3c
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80012de:	e01d      	b.n	800131c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3b5a      	subs	r3, #90	@ 0x5a
 80012f4:	221f      	movs	r2, #31
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4019      	ands	r1, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	3b5a      	subs	r3, #90	@ 0x5a
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80e5 	bne.w	80014f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d91c      	bls.n	800136e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6999      	ldr	r1, [r3, #24]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	3b1e      	subs	r3, #30
 8001346:	2207      	movs	r2, #7
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6898      	ldr	r0, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	3b1e      	subs	r3, #30
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	e019      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6959      	ldr	r1, [r3, #20]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	2207      	movs	r2, #7
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	fa00 f203 	lsl.w	r2, r0, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	3b01      	subs	r3, #1
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d84f      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0x28c>
 80013c4:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <HAL_ADC_ConfigChannel+0x1f4>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013ff 	.word	0x080013ff
 80013d4:	08001421 	.word	0x08001421
 80013d8:	08001443 	.word	0x08001443
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <HAL_ADC_ConfigChannel+0x470>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	0691      	lsls	r1, r2, #26
 80013ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013ee:	430a      	orrs	r2, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013fa:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013fc:	e07b      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001404:	4b90      	ldr	r3, [pc, #576]	@ (8001648 <HAL_ADC_ConfigChannel+0x470>)
 8001406:	4013      	ands	r3, r2
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	0691      	lsls	r1, r2, #26
 800140e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001410:	430a      	orrs	r2, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800141c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800141e:	e06a      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001426:	4b88      	ldr	r3, [pc, #544]	@ (8001648 <HAL_ADC_ConfigChannel+0x470>)
 8001428:	4013      	ands	r3, r2
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	0691      	lsls	r1, r2, #26
 8001430:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001432:	430a      	orrs	r2, r1
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800143e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001440:	e059      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001448:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <HAL_ADC_ConfigChannel+0x470>)
 800144a:	4013      	ands	r3, r2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	0691      	lsls	r1, r2, #26
 8001452:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001454:	430a      	orrs	r2, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001460:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001462:	e048      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	069b      	lsls	r3, r3, #26
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001486:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800148e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	069b      	lsls	r3, r3, #26
 8001498:	429a      	cmp	r2, r3
 800149a:	d107      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014aa:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	069b      	lsls	r3, r3, #26
 80014bc:	429a      	cmp	r2, r3
 80014be:	d107      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ce:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	069b      	lsls	r3, r3, #26
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014f4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x33e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x33e>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_ADC_ConfigChannel+0x340>
 8001516:	2300      	movs	r3, #0
 8001518:	2b00      	cmp	r3, #0
 800151a:	f040 8131 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d00f      	beq.n	8001546 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001544:	e049      	b.n	80015da <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b09      	cmp	r3, #9
 8001566:	d91c      	bls.n	80015a2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6999      	ldr	r1, [r3, #24]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3b1b      	subs	r3, #27
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	3b1b      	subs	r3, #27
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	e01b      	b.n	80015da <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6959      	ldr	r1, [r3, #20]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	2207      	movs	r2, #7
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4019      	ands	r1, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6898      	ldr	r0, [r3, #8]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e2:	d004      	beq.n	80015ee <HAL_ADC_ConfigChannel+0x416>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_ADC_ConfigChannel+0x474>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x41a>
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_ADC_ConfigChannel+0x478>)
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x41c>
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_ADC_ConfigChannel+0x47c>)
 80015f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d105      	bne.n	800160a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d015      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800160e:	2b11      	cmp	r3, #17
 8001610:	d105      	bne.n	800161e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001622:	2b12      	cmp	r3, #18
 8001624:	f040 80ac 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 80a5 	bne.w	8001780 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163e:	d10b      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x480>
 8001640:	4b02      	ldr	r3, [pc, #8]	@ (800164c <HAL_ADC_ConfigChannel+0x474>)
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e023      	b.n	800168e <HAL_ADC_ConfigChannel+0x4b6>
 8001646:	bf00      	nop
 8001648:	83fff000 	.word	0x83fff000
 800164c:	50000100 	.word	0x50000100
 8001650:	50000300 	.word	0x50000300
 8001654:	50000700 	.word	0x50000700
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a4e      	ldr	r2, [pc, #312]	@ (8001798 <HAL_ADC_ConfigChannel+0x5c0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d103      	bne.n	800166a <HAL_ADC_ConfigChannel+0x492>
 8001662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e011      	b.n	800168e <HAL_ADC_ConfigChannel+0x4b6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a4b      	ldr	r2, [pc, #300]	@ (800179c <HAL_ADC_ConfigChannel+0x5c4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d102      	bne.n	800167a <HAL_ADC_ConfigChannel+0x4a2>
 8001674:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e009      	b.n	800168e <HAL_ADC_ConfigChannel+0x4b6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a48      	ldr	r2, [pc, #288]	@ (80017a0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <HAL_ADC_ConfigChannel+0x4b2>
 8001684:	4b45      	ldr	r3, [pc, #276]	@ (800179c <HAL_ADC_ConfigChannel+0x5c4>)
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e001      	b.n	800168e <HAL_ADC_ConfigChannel+0x4b6>
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x4d6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x4d6>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x4d8>
 80016ae:	2300      	movs	r3, #0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d150      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d010      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x4fe>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x4fe>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x500>
 80016d6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d13c      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d11d      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x548>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <HAL_ADC_ConfigChannel+0x5cc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9a      	lsrs	r2, r3, #18
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001710:	e002      	b.n	8001718 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3b01      	subs	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f9      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800171e:	e02e      	b.n	800177e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b11      	cmp	r3, #17
 8001726:	d10b      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x568>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001730:	d106      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800173a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800173e:	e01e      	b.n	800177e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d11a      	bne.n	800177e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001752:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001754:	e013      	b.n	800177e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001768:	e00a      	b.n	8001780 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f043 0220 	orr.w	r2, r3, #32
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800177c:	e000      	b.n	8001780 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800177e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001788:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800178c:	4618      	mov	r0, r3
 800178e:	376c      	adds	r7, #108	@ 0x6c
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	50000100 	.word	0x50000100
 800179c:	50000400 	.word	0x50000400
 80017a0:	50000500 	.word	0x50000500
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83

080017ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b099      	sub	sp, #100	@ 0x64
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c4:	d102      	bne.n	80017cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	e01a      	b.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	@ (800197c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d103      	bne.n	80017de <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e011      	b.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a67      	ldr	r2, [pc, #412]	@ (8001980 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017e8:	4b66      	ldr	r3, [pc, #408]	@ (8001984 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	e009      	b.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a64      	ldr	r2, [pc, #400]	@ (8001984 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80017f8:	4b61      	ldr	r3, [pc, #388]	@ (8001980 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	e001      	b.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b0      	b.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001816:	2302      	movs	r3, #2
 8001818:	e0a9      	b.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 808d 	bne.w	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 8086 	bne.w	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001848:	d004      	beq.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a4b      	ldr	r2, [pc, #300]	@ (800197c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001854:	4b4c      	ldr	r3, [pc, #304]	@ (8001988 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001856:	e000      	b.n	800185a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001858:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800185a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d040      	beq.n	80018e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001876:	035b      	lsls	r3, r3, #13
 8001878:	430b      	orrs	r3, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800187e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80018a0:	2300      	movs	r3, #0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d15c      	bne.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018c2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d14b      	bne.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80018d0:	f023 030f 	bic.w	r3, r3, #15
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6892      	ldr	r2, [r2, #8]
 80018dc:	430a      	orrs	r2, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018e4:	e03c      	b.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018f0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d108      	bne.n	8001912 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001912:	2300      	movs	r3, #0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d123      	bne.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001934:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d112      	bne.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800193a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001942:	f023 030f 	bic.w	r3, r3, #15
 8001946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001948:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800194a:	e009      	b.n	8001960 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f043 0220 	orr.w	r2, r3, #32
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800195e:	e000      	b.n	8001962 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001960:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800196a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800196e:	4618      	mov	r0, r3
 8001970:	3764      	adds	r7, #100	@ 0x64
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	50000100 	.word	0x50000100
 8001980:	50000400 	.word	0x50000400
 8001984:	50000500 	.word	0x50000500
 8001988:	50000300 	.word	0x50000300
 800198c:	50000700 	.word	0x50000700

08001990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <ADC_Enable+0x2c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <ADC_Enable+0x2c>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <ADC_Enable+0x2e>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d143      	bne.n	8001a4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <ADC_Enable+0xc4>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e02f      	b.n	8001a4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80019fc:	f7fe ff9c 	bl	8000938 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a02:	e01b      	b.n	8001a3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a04:	f7fe ff98 	bl	8000938 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d914      	bls.n	8001a3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d00d      	beq.n	8001a3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f043 0210 	orr.w	r2, r3, #16
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e007      	b.n	8001a4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d1dc      	bne.n	8001a04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	8000003f 	.word	0x8000003f

08001a58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <ADC_Disable+0x2c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <ADC_Disable+0x2c>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <ADC_Disable+0x2e>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d047      	beq.n	8001b1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030d 	and.w	r3, r3, #13
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10f      	bne.n	8001ab8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0202 	orr.w	r2, r2, #2
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2203      	movs	r2, #3
 8001aae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe ff42 	bl	8000938 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ab6:	e029      	b.n	8001b0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0210 	orr.w	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e023      	b.n	8001b1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ad4:	f7fe ff30 	bl	8000938 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d914      	bls.n	8001b0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10d      	bne.n	8001b0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f043 0210 	orr.w	r2, r3, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e007      	b.n	8001b1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d0dc      	beq.n	8001ad4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff47 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff5c 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffb0 	bl	8001c44 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	e160      	b.n	8001fc2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8152 	beq.w	8001fbc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d005      	beq.n	8001d30 <HAL_GPIO_Init+0x40>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d130      	bne.n	8001d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d66:	2201      	movs	r2, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 0201 	and.w	r2, r3, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d017      	beq.n	8001dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d123      	bne.n	8001e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	6939      	ldr	r1, [r7, #16]
 8001e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0203 	and.w	r2, r3, #3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80ac 	beq.w	8001fbc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e64:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe0 <HAL_GPIO_Init+0x2f0>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe0 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <HAL_GPIO_Init+0x2f0>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7c:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_GPIO_Init+0x2f4>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ea6:	d025      	beq.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8001fe8 <HAL_GPIO_Init+0x2f8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01f      	beq.n	8001ef0 <HAL_GPIO_Init+0x200>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8001fec <HAL_GPIO_Init+0x2fc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d019      	beq.n	8001eec <HAL_GPIO_Init+0x1fc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1f8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <HAL_GPIO_Init+0x308>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1f0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1ec>
 8001ed8:	2306      	movs	r3, #6
 8001eda:	e00c      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001edc:	2307      	movs	r3, #7
 8001ede:	e00a      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	e008      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f06:	4937      	ldr	r1, [pc, #220]	@ (8001fe4 <HAL_GPIO_Init+0x2f4>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f38:	4a31      	ldr	r2, [pc, #196]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3e:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f62:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f ae97 	bne.w	8001d00 <HAL_GPIO_Init+0x10>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	48001000 	.word	0x48001000
 8001ff8:	48001400 	.word	0x48001400
 8001ffc:	48001800 	.word	0x48001800
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002020:	e002      	b.n	8002028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800203a:	af00      	add	r7, sp, #0
 800203c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002040:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002044:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f001 b80a 	b.w	800306e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8161 	beq.w	8002332 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002070:	4bae      	ldr	r3, [pc, #696]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4bab      	ldr	r3, [pc, #684]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x104>
 8002088:	4ba8      	ldr	r3, [pc, #672]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d150      	bne.n	8002138 <HAL_RCC_OscConfig+0x104>
 8002096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800209a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020b6:	d802      	bhi.n	80020be <HAL_RCC_OscConfig+0x8a>
 80020b8:	4b9c      	ldr	r3, [pc, #624]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0xb6>
 80020be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80020da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020e6:	4b91      	ldr	r3, [pc, #580]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ee:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80020f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80020f6:	fa92 f2a2 	rbit	r2, r2
 80020fa:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80020fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8108 	beq.w	8002330 <HAL_RCC_OscConfig+0x2fc>
 8002120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002124:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 80ff 	bne.w	8002330 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	f000 bf9b 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x124>
 800214a:	4b78      	ldr	r3, [pc, #480]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e036      	b.n	80021c6 <HAL_RCC_OscConfig+0x192>
 8002158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x14e>
 8002168:	4b70      	ldr	r3, [pc, #448]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6f      	ldr	r2, [pc, #444]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b6d      	ldr	r3, [pc, #436]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6c      	ldr	r2, [pc, #432]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e021      	b.n	80021c6 <HAL_RCC_OscConfig+0x192>
 8002182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002186:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x17a>
 8002194:	4b65      	ldr	r3, [pc, #404]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a64      	ldr	r2, [pc, #400]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800219a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b62      	ldr	r3, [pc, #392]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a61      	ldr	r2, [pc, #388]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x192>
 80021ae:	4b5f      	ldr	r3, [pc, #380]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5e      	ldr	r2, [pc, #376]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b5c      	ldr	r3, [pc, #368]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5b      	ldr	r2, [pc, #364]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d054      	beq.n	8002280 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fbaf 	bl	8000938 <HAL_GetTick>
 80021da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fbaa 	bl	8000938 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	@ 0x64
 80021ee:	d902      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f000 bf3c 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 80021f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021fa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800220a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b3f      	cmp	r3, #63	@ 0x3f
 8002216:	d802      	bhi.n	800221e <HAL_RCC_OscConfig+0x1ea>
 8002218:	4b44      	ldr	r3, [pc, #272]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x216>
 800221e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002222:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002236:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800223a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002246:	4b39      	ldr	r3, [pc, #228]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800224e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002252:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800225e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0b0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1ac>
 800227e:	e058      	b.n	8002332 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fb5a 	bl	8000938 <HAL_GetTick>
 8002284:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228a:	f7fe fb55 	bl	8000938 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bee7 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 80022a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80022b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b3f      	cmp	r3, #63	@ 0x3f
 80022c0:	d802      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x294>
 80022c2:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e015      	b.n	80022f4 <HAL_RCC_OscConfig+0x2c0>
 80022c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022cc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_OscConfig+0x2f8>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022f8:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80022fc:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002308:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f042 0220 	orr.w	r2, r2, #32
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f002 021f 	and.w	r2, r2, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b0      	bne.n	800228a <HAL_RCC_OscConfig+0x256>
 8002328:	e003      	b.n	8002332 <HAL_RCC_OscConfig+0x2fe>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002336:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 816d 	beq.w	8002622 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002348:	4bcd      	ldr	r3, [pc, #820]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002354:	4bca      	ldr	r3, [pc, #808]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d16e      	bne.n	800243e <HAL_RCC_OscConfig+0x40a>
 8002360:	4bc7      	ldr	r3, [pc, #796]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800236c:	d167      	bne.n	800243e <HAL_RCC_OscConfig+0x40a>
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002380:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b3f      	cmp	r3, #63	@ 0x3f
 800238c:	d802      	bhi.n	8002394 <HAL_RCC_OscConfig+0x360>
 800238e:	4bbc      	ldr	r3, [pc, #752]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e013      	b.n	80023bc <HAL_RCC_OscConfig+0x388>
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80023ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	2202      	movs	r2, #2
 80023be:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80023ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCC_OscConfig+0x3d0>
 80023ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f000 be35 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b9e      	ldr	r3, [pc, #632]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	21f8      	movs	r1, #248	@ 0xf8
 800241a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002422:	fa91 f1a1 	rbit	r1, r1
 8002426:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800242a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800242e:	fab1 f181 	clz	r1, r1
 8002432:	b2c9      	uxtb	r1, r1
 8002434:	408b      	lsls	r3, r1
 8002436:	4992      	ldr	r1, [pc, #584]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243c:	e0f1      	b.n	8002622 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8083 	beq.w	8002556 <HAL_RCC_OscConfig+0x522>
 8002450:	2301      	movs	r3, #1
 8002452:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002462:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002470:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2301      	movs	r3, #1
 800247a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fa5c 	bl	8000938 <HAL_GetTick>
 8002480:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe fa57 	bl	8000938 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d902      	bls.n	800249c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	f000 bde9 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80024ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ba:	d802      	bhi.n	80024c2 <HAL_RCC_OscConfig+0x48e>
 80024bc:	4b70      	ldr	r3, [pc, #448]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0x4b6>
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80024da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80024e6:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	2202      	movs	r2, #2
 80024ec:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80024f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80024f4:	fa92 f2a2 	rbit	r2, r2
 80024f8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80024fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002500:	fab2 f282 	clz	r2, r2
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f002 021f 	and.w	r2, r2, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0b4      	beq.n	8002486 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b58      	ldr	r3, [pc, #352]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002528:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	21f8      	movs	r1, #248	@ 0xf8
 8002532:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800253a:	fa91 f1a1 	rbit	r1, r1
 800253e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002542:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002546:	fab1 f181 	clz	r1, r1
 800254a:	b2c9      	uxtb	r1, r1
 800254c:	408b      	lsls	r3, r1
 800254e:	494c      	ldr	r1, [pc, #304]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e065      	b.n	8002622 <HAL_RCC_OscConfig+0x5ee>
 8002556:	2301      	movs	r3, #1
 8002558:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002568:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002576:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	461a      	mov	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe f9d9 	bl	8000938 <HAL_GetTick>
 8002586:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258c:	f7fe f9d4 	bl	8000938 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d902      	bls.n	80025a2 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	f000 bd66 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80025b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b3f      	cmp	r3, #63	@ 0x3f
 80025c0:	d802      	bhi.n	80025c8 <HAL_RCC_OscConfig+0x594>
 80025c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x5bc>
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025ec:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_RCC_OscConfig+0x64c>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	2202      	movs	r2, #2
 80025f2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80025f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002602:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1b4      	bne.n	800258c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002626:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8119 	beq.w	800286a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8082 	beq.w	800274e <HAL_RCC_OscConfig+0x71a>
 800264a:	2301      	movs	r3, #1
 800264c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800265c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x650>)
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	461a      	mov	r2, r3
 8002670:	2301      	movs	r3, #1
 8002672:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe f960 	bl	8000938 <HAL_GetTick>
 8002678:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267c:	e00f      	b.n	800269e <HAL_RCC_OscConfig+0x66a>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe f956 	bl	8000938 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d902      	bls.n	800269e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	f000 bce8 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4bb0      	ldr	r3, [pc, #704]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800270a:	2102      	movs	r1, #2
 800270c:	6019      	str	r1, [r3, #0]
 800270e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002712:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f1a3 	rbit	r1, r3
 800271c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002720:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002724:	6019      	str	r1, [r3, #0]
  return result;
 8002726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d09d      	beq.n	8002688 <HAL_RCC_OscConfig+0x654>
 800274c:	e08d      	b.n	800286a <HAL_RCC_OscConfig+0x836>
 800274e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002752:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002770:	601a      	str	r2, [r3, #0]
  return result;
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800277a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	4b8f      	ldr	r3, [pc, #572]	@ (80029c4 <HAL_RCC_OscConfig+0x990>)
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	461a      	mov	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe f8d2 	bl	8000938 <HAL_GetTick>
 8002794:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279a:	f7fe f8cd 	bl	8000938 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	f000 bc5f 	b.w	800306e <HAL_RCC_OscConfig+0x103a>
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027b8:	2202      	movs	r2, #2
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002808:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002816:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800281a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b68      	ldr	r3, [pc, #416]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 800281e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002824:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002828:	2102      	movs	r1, #2
 800282a:	6019      	str	r1, [r3, #0]
 800282c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002830:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f1a3 	rbit	r1, r3
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002842:	6019      	str	r1, [r3, #0]
  return result;
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d197      	bne.n	800279a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 819c 	beq.w	8002bb8 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b4e      	ldr	r3, [pc, #312]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a4a      	ldr	r2, [pc, #296]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	61d3      	str	r3, [r2, #28]
 800289e:	4b48      	ldr	r3, [pc, #288]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80028a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x994>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11a      	bne.n	8002902 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028cc:	4b3e      	ldr	r3, [pc, #248]	@ (80029c8 <HAL_RCC_OscConfig+0x994>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3d      	ldr	r2, [pc, #244]	@ (80029c8 <HAL_RCC_OscConfig+0x994>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d8:	f7fe f82e 	bl	8000938 <HAL_GetTick>
 80028dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe f829 	bl	8000938 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e3bb      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x994>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002906:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x8ec>
 8002912:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a2a      	ldr	r2, [pc, #168]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	e035      	b.n	800298c <HAL_RCC_OscConfig+0x958>
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x916>
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e020      	b.n	800298c <HAL_RCC_OscConfig+0x958>
 800294a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x940>
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a15      	ldr	r2, [pc, #84]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0x958>
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <HAL_RCC_OscConfig+0x98c>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002990:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8085 	beq.w	8002aa8 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fd ffcb 	bl	8000938 <HAL_GetTick>
 80029a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e011      	b.n	80029cc <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fd ffc6 	bl	8000938 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d907      	bls.n	80029cc <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e356      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	10908120 	.word	0x10908120
 80029c8:	40007000 	.word	0x40007000
 80029cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a12:	601a      	str	r2, [r3, #0]
  return result;
 8002a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0xa00>
 8002a2e:	4b98      	ldr	r3, [pc, #608]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0xa28>
 8002a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a38:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a44:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a52:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a60:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a64:	2102      	movs	r1, #2
 8002a66:	6011      	str	r1, [r2, #0]
 8002a68:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	fa92 f1a2 	rbit	r1, r2
 8002a76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a7a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a7e:	6011      	str	r1, [r2, #0]
  return result;
 8002a80:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a84:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d080      	beq.n	80029a8 <HAL_RCC_OscConfig+0x974>
 8002aa6:	e07d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fd ff46 	bl	8000938 <HAL_GetTick>
 8002aac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd ff41 	bl	8000938 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e2d1      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 8002aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ace:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ada:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b10:	601a      	str	r2, [r3, #0]
  return result;
 8002b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b16:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0xafe>
 8002b2c:	4b58      	ldr	r3, [pc, #352]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	e013      	b.n	8002b5a <HAL_RCC_OscConfig+0xb26>
 8002b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b36:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b42:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b50:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b5e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b62:	2102      	movs	r1, #2
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b6a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	fa92 f1a2 	rbit	r1, r2
 8002b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b78:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b7c:	6011      	str	r1, [r2, #0]
  return result;
 8002b7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b82:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fab2 f282 	clz	r2, r2
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f002 021f 	and.w	r2, r2, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d186      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4a37      	ldr	r2, [pc, #220]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8251 	beq.w	800306c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bca:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	f000 820f 	beq.w	8002ff6 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	f040 8165 	bne.w	8002eb4 <HAL_RCC_OscConfig+0xe80>
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c0e:	601a      	str	r2, [r3, #0]
  return result;
 8002c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c14:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd fe82 	bl	8000938 <HAL_GetTick>
 8002c34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fd fe7d 	bl	8000938 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e20f      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c60:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c72:	601a      	str	r2, [r3, #0]
  return result;
 8002c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c78:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c86:	d805      	bhi.n	8002c94 <HAL_RCC_OscConfig+0xc60>
 8002c88:	4b01      	ldr	r3, [pc, #4]	@ (8002c90 <HAL_RCC_OscConfig+0xc5c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e02a      	b.n	8002ce4 <HAL_RCC_OscConfig+0xcb0>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c98:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ccc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cda:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	4bca      	ldr	r3, [pc, #808]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ce8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cf0:	6011      	str	r1, [r2, #0]
 8002cf2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cf6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	fa92 f1a2 	rbit	r1, r2
 8002d00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d04:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d08:	6011      	str	r1, [r2, #0]
  return result;
 8002d0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d0e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f002 021f 	and.w	r2, r2, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d184      	bne.n	8002c3a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d30:	4bb6      	ldr	r3, [pc, #728]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f023 020f 	bic.w	r2, r3, #15
 8002d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	49b1      	ldr	r1, [pc, #708]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002d4a:	4bb0      	ldr	r3, [pc, #704]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a19      	ldr	r1, [r3, #32]
 8002d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	49a7      	ldr	r1, [pc, #668]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 8002d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d76:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d84:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	fa93 f2a3 	rbit	r2, r3
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d96:	601a      	str	r2, [r3, #0]
  return result;
 8002d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002da0:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	2301      	movs	r3, #1
 8002db6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd fdbe 	bl	8000938 <HAL_GetTick>
 8002dbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc0:	e009      	b.n	8002dd6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fd fdb9 	bl	8000938 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e14b      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 8002dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dda:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e00:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e0e:	d802      	bhi.n	8002e16 <HAL_RCC_OscConfig+0xde2>
 8002e10:	4b7e      	ldr	r3, [pc, #504]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	e027      	b.n	8002e66 <HAL_RCC_OscConfig+0xe32>
 8002e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	fa93 f2a3 	rbit	r2, r3
 8002e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e36:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e40:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4b6a      	ldr	r3, [pc, #424]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e6a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e72:	6011      	str	r1, [r2, #0]
 8002e74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	fa92 f1a2 	rbit	r1, r2
 8002e82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e86:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002e8a:	6011      	str	r1, [r2, #0]
  return result;
 8002e8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e90:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d087      	beq.n	8002dc2 <HAL_RCC_OscConfig+0xd8e>
 8002eb2:	e0db      	b.n	800306c <HAL_RCC_OscConfig+0x1038>
 8002eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fa93 f2a3 	rbit	r2, r3
 8002ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ed8:	601a      	str	r2, [r3, #0]
  return result;
 8002eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ede:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ee2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd fd1d 	bl	8000938 <HAL_GetTick>
 8002efe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	e009      	b.n	8002f18 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fd fd18 	bl	8000938 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0aa      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 8002f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f38:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f3c:	601a      	str	r2, [r3, #0]
  return result;
 8002f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f50:	d802      	bhi.n	8002f58 <HAL_RCC_OscConfig+0xf24>
 8002f52:	4b2e      	ldr	r3, [pc, #184]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	e027      	b.n	8002fa8 <HAL_RCC_OscConfig+0xf74>
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	fa93 f2a3 	rbit	r2, r3
 8002f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f78:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f82:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f90:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_OscConfig+0xfd8>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fac:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fb0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fb4:	6011      	str	r1, [r2, #0]
 8002fb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fc8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002fcc:	6011      	str	r1, [r2, #0]
  return result;
 8002fce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fd2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f002 021f 	and.w	r2, r2, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d187      	bne.n	8002f04 <HAL_RCC_OscConfig+0xed0>
 8002ff4:	e03a      	b.n	800306c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d104      	bne.n	8003010 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e031      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCC_OscConfig+0x1044>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003018:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <HAL_RCC_OscConfig+0x1044>)
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003024:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	d117      	bne.n	8003068 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003038:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800303c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003044:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800304c:	429a      	cmp	r2, r3
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09e      	sub	sp, #120	@ 0x78
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e154      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b89      	ldr	r3, [pc, #548]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b86      	ldr	r3, [pc, #536]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4984      	ldr	r1, [pc, #528]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b82      	ldr	r3, [pc, #520]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e13c      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b7b      	ldr	r3, [pc, #492]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4978      	ldr	r1, [pc, #480]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80cd 	beq.w	800328a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d137      	bne.n	8003168 <HAL_RCC_ClockConfig+0xec>
 80030f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003110:	d802      	bhi.n	8003118 <HAL_RCC_ClockConfig+0x9c>
 8003112:	4b6b      	ldr	r3, [pc, #428]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e00f      	b.n	8003138 <HAL_RCC_ClockConfig+0xbc>
 8003118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800311c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	667b      	str	r3, [r7, #100]	@ 0x64
 8003126:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800312a:	663b      	str	r3, [r7, #96]	@ 0x60
 800312c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003134:	4b62      	ldr	r3, [pc, #392]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800313c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800313e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003146:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f042 0220 	orr.w	r2, r2, #32
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f002 021f 	and.w	r2, r2, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d171      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0ea      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d137      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x164>
 8003170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003174:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800317e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b3f      	cmp	r3, #63	@ 0x3f
 8003188:	d802      	bhi.n	8003190 <HAL_RCC_ClockConfig+0x114>
 800318a:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_ClockConfig+0x134>
 8003190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003194:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	647b      	str	r3, [r7, #68]	@ 0x44
 800319e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ac:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80031b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80031be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d135      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0ae      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
 80031e0:	2302      	movs	r3, #2
 80031e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80031f6:	d802      	bhi.n	80031fe <HAL_RCC_ClockConfig+0x182>
 80031f8:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	e00d      	b.n	800321a <HAL_RCC_ClockConfig+0x19e>
 80031fe:	2302      	movs	r3, #2
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
 800320a:	2302      	movs	r3, #2
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2202      	movs	r2, #2
 800321c:	61ba      	str	r2, [r7, #24]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	fa92 f2a2 	rbit	r2, r2
 8003224:	617a      	str	r2, [r7, #20]
  return result;
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	fab2 f282 	clz	r2, r2
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	f042 0220 	orr.w	r2, r2, #32
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f002 021f 	and.w	r2, r2, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e07a      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003248:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 0203 	bic.w	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	491a      	ldr	r1, [pc, #104]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800325a:	f7fd fb6d 	bl	8000938 <HAL_GetTick>
 800325e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003260:	e00a      	b.n	8003278 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003262:	f7fd fb69 	bl	8000938 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e062      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_RCC_ClockConfig+0x244>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 020c 	and.w	r2, r3, #12
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	429a      	cmp	r2, r3
 8003288:	d1eb      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d215      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	4906      	ldr	r1, [pc, #24]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <HAL_RCC_ClockConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d006      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_RCC_ClockConfig+0x2c2>
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <HAL_RCC_ClockConfig+0x2cc>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	491a      	ldr	r1, [pc, #104]	@ (8003348 <HAL_RCC_ClockConfig+0x2cc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <HAL_RCC_ClockConfig+0x2cc>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4912      	ldr	r1, [pc, #72]	@ (8003348 <HAL_RCC_ClockConfig+0x2cc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003302:	f000 f829 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <HAL_RCC_ClockConfig+0x2cc>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003310:	22f0      	movs	r2, #240	@ 0xf0
 8003312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	60fa      	str	r2, [r7, #12]
  return result;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	40d3      	lsrs	r3, r2
 8003326:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x2d0>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	fa21 f303 	lsr.w	r3, r1, r3
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_RCC_ClockConfig+0x2d4>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_RCC_ClockConfig+0x2d8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd faba 	bl	80008b0 <HAL_InitTick>
  
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3778      	adds	r7, #120	@ 0x78
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	08004bd0 	.word	0x08004bd0
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003372:	4b1f      	ldr	r3, [pc, #124]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b04      	cmp	r3, #4
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x30>
 8003382:	2b08      	cmp	r3, #8
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x36>
 8003386:	e029      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003388:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800338a:	613b      	str	r3, [r7, #16]
      break;
 800338c:	e029      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	0c9b      	lsrs	r3, r3, #18
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033b4:	4a0f      	ldr	r2, [pc, #60]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e007      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033c6:	4a0b      	ldr	r2, [pc, #44]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	613b      	str	r3, [r7, #16]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	693b      	ldr	r3, [r7, #16]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000
 80033f4:	007a1200 	.word	0x007a1200
 80033f8:	08004be8 	.word	0x08004be8
 80033fc:	08004bf8 	.word	0x08004bf8

08003400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800341e:	f7ff ffef 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003422:	4601      	mov	r1, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800342c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003430:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	fa92 f2a2 	rbit	r2, r2
 8003438:	603a      	str	r2, [r7, #0]
  return result;
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	fab2 f282 	clz	r2, r2
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	40d3      	lsrs	r3, r2
 8003444:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	08004be0 	.word	0x08004be0

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003462:	f7ff ffcd 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003466:	4601      	mov	r1, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003470:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003474:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	603a      	str	r2, [r7, #0]
  return result;
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	40d3      	lsrs	r3, r2
 8003488:	4a04      	ldr	r2, [pc, #16]	@ (800349c <HAL_RCC_GetPCLK2Freq+0x40>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	08004be0 	.word	0x08004be0

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b092      	sub	sp, #72	@ 0x48
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80d2 	beq.w	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c4:	4b4d      	ldr	r3, [pc, #308]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10e      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b4a      	ldr	r3, [pc, #296]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b44      	ldr	r3, [pc, #272]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b41      	ldr	r3, [pc, #260]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a40      	ldr	r2, [pc, #256]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003504:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fd fa17 	bl	8000938 <HAL_GetTick>
 800350a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fd fa13 	bl	8000938 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	@ 0x64
 800351a:	d901      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1d4      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b37      	ldr	r3, [pc, #220]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800352c:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003534:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8082 	beq.w	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003546:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003548:	429a      	cmp	r2, r3
 800354a:	d07a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800354c:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003556:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	2301      	movs	r3, #1
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800357e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	4b1c      	ldr	r3, [pc, #112]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	461a      	mov	r2, r3
 800359a:	2300      	movs	r3, #0
 800359c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d049      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd f9c3 	bl	8000938 <HAL_GetTick>
 80035b2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd f9bf 	bl	8000938 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e17e      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80035cc:	2302      	movs	r3, #2
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d8:	2302      	movs	r3, #2
 80035da:	623b      	str	r3, [r7, #32]
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	61fb      	str	r3, [r7, #28]
  return result;
 80035e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035f6:	4b01      	ldr	r3, [pc, #4]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	e00d      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	10908100 	.word	0x10908100
 8003608:	2302      	movs	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	4b9a      	ldr	r3, [pc, #616]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	2202      	movs	r2, #2
 800361a:	613a      	str	r2, [r7, #16]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	fa92 f2a2 	rbit	r2, r2
 8003622:	60fa      	str	r2, [r7, #12]
  return result;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0b9      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003642:	4b8f      	ldr	r3, [pc, #572]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	498c      	ldr	r1, [pc, #560]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003654:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a87      	ldr	r2, [pc, #540]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003666:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003674:	4b82      	ldr	r3, [pc, #520]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	f023 0203 	bic.w	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	497f      	ldr	r1, [pc, #508]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003682:	4313      	orrs	r3, r2
 8003684:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003692:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4978      	ldr	r1, [pc, #480]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036b0:	4b73      	ldr	r3, [pc, #460]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4970      	ldr	r1, [pc, #448]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4969      	ldr	r1, [pc, #420]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036ec:	4b64      	ldr	r3, [pc, #400]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	4961      	ldr	r1, [pc, #388]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370a:	4b5d      	ldr	r3, [pc, #372]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f023 0220 	bic.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	495a      	ldr	r1, [pc, #360]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003728:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	4952      	ldr	r1, [pc, #328]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003746:	4b4e      	ldr	r3, [pc, #312]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	494b      	ldr	r1, [pc, #300]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003764:	4b46      	ldr	r3, [pc, #280]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4943      	ldr	r1, [pc, #268]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003782:	4b3f      	ldr	r3, [pc, #252]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	493c      	ldr	r1, [pc, #240]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	4934      	ldr	r1, [pc, #208]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80037be:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	492d      	ldr	r1, [pc, #180]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	4925      	ldr	r1, [pc, #148]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037fa:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	491e      	ldr	r1, [pc, #120]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	4916      	ldr	r1, [pc, #88]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003836:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003842:	490f      	ldr	r1, [pc, #60]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	4907      	ldr	r1, [pc, #28]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003872:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003886:	4913      	ldr	r1, [pc, #76]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003888:	4313      	orrs	r3, r2
 800388a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003898:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a4:	490b      	ldr	r1, [pc, #44]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c2:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3748      	adds	r7, #72	@ 0x48
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e040      	b.n	800396c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fc fede 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	@ 0x24
 8003904:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa86 	bl	8003e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8af 	bl	8003a88 <UART_SetConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e01b      	b.n	800396c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fb05 	bl	8003f74 <UART_CheckIdleState>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003988:	2b20      	cmp	r3, #32
 800398a:	d177      	bne.n	8003a7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_UART_Transmit+0x24>
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e070      	b.n	8003a7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	@ 0x21
 80039a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039aa:	f7fc ffc5 	bl	8000938 <HAL_GetTick>
 80039ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c8:	d108      	bne.n	80039dc <HAL_UART_Transmit+0x68>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e003      	b.n	80039e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039e4:	e02f      	b.n	8003a46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2180      	movs	r1, #128	@ 0x80
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fb67 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e03b      	b.n	8003a7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	3302      	adds	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e007      	b.n	8003a34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1c9      	bne.n	80039e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2140      	movs	r1, #64	@ 0x40
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fb31 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e005      	b.n	8003a7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b92      	ldr	r3, [pc, #584]	@ (8003cfc <UART_SetConfig+0x274>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a80      	ldr	r2, [pc, #512]	@ (8003d00 <UART_SetConfig+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <UART_SetConfig+0xbe>
 8003b04:	4b7f      	ldr	r3, [pc, #508]	@ (8003d04 <UART_SetConfig+0x27c>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d817      	bhi.n	8003b40 <UART_SetConfig+0xb8>
 8003b10:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <UART_SetConfig+0x90>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b35 	.word	0x08003b35
 8003b20:	08003b3b 	.word	0x08003b3b
 8003b24:	08003b2f 	.word	0x08003b2f
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e0b5      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e0b2      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0af      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e0ac      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0a9      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003d08 <UART_SetConfig+0x280>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d124      	bne.n	8003b9a <UART_SetConfig+0x112>
 8003b50:	4b6c      	ldr	r3, [pc, #432]	@ (8003d04 <UART_SetConfig+0x27c>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b5c:	d011      	beq.n	8003b82 <UART_SetConfig+0xfa>
 8003b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b62:	d817      	bhi.n	8003b94 <UART_SetConfig+0x10c>
 8003b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b68:	d011      	beq.n	8003b8e <UART_SetConfig+0x106>
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b6e:	d811      	bhi.n	8003b94 <UART_SetConfig+0x10c>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <UART_SetConfig+0xf4>
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d006      	beq.n	8003b88 <UART_SetConfig+0x100>
 8003b7a:	e00b      	b.n	8003b94 <UART_SetConfig+0x10c>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e08b      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b82:	2302      	movs	r3, #2
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e088      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e085      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e082      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e07f      	b.n	8003c9a <UART_SetConfig+0x212>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d0c <UART_SetConfig+0x284>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d124      	bne.n	8003bee <UART_SetConfig+0x166>
 8003ba4:	4b57      	ldr	r3, [pc, #348]	@ (8003d04 <UART_SetConfig+0x27c>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003bac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bb0:	d011      	beq.n	8003bd6 <UART_SetConfig+0x14e>
 8003bb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bb6:	d817      	bhi.n	8003be8 <UART_SetConfig+0x160>
 8003bb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bbc:	d011      	beq.n	8003be2 <UART_SetConfig+0x15a>
 8003bbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bc2:	d811      	bhi.n	8003be8 <UART_SetConfig+0x160>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <UART_SetConfig+0x148>
 8003bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bcc:	d006      	beq.n	8003bdc <UART_SetConfig+0x154>
 8003bce:	e00b      	b.n	8003be8 <UART_SetConfig+0x160>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e061      	b.n	8003c9a <UART_SetConfig+0x212>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e05e      	b.n	8003c9a <UART_SetConfig+0x212>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e05b      	b.n	8003c9a <UART_SetConfig+0x212>
 8003be2:	2308      	movs	r3, #8
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e058      	b.n	8003c9a <UART_SetConfig+0x212>
 8003be8:	2310      	movs	r3, #16
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e055      	b.n	8003c9a <UART_SetConfig+0x212>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a47      	ldr	r2, [pc, #284]	@ (8003d10 <UART_SetConfig+0x288>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d124      	bne.n	8003c42 <UART_SetConfig+0x1ba>
 8003bf8:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <UART_SetConfig+0x27c>)
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c04:	d011      	beq.n	8003c2a <UART_SetConfig+0x1a2>
 8003c06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c0a:	d817      	bhi.n	8003c3c <UART_SetConfig+0x1b4>
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c10:	d011      	beq.n	8003c36 <UART_SetConfig+0x1ae>
 8003c12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c16:	d811      	bhi.n	8003c3c <UART_SetConfig+0x1b4>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <UART_SetConfig+0x19c>
 8003c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c20:	d006      	beq.n	8003c30 <UART_SetConfig+0x1a8>
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x1b4>
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e037      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e034      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c30:	2304      	movs	r3, #4
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e031      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c36:	2308      	movs	r3, #8
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e02e      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e02b      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a33      	ldr	r2, [pc, #204]	@ (8003d14 <UART_SetConfig+0x28c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d124      	bne.n	8003c96 <UART_SetConfig+0x20e>
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <UART_SetConfig+0x27c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003c54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c58:	d011      	beq.n	8003c7e <UART_SetConfig+0x1f6>
 8003c5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c5e:	d817      	bhi.n	8003c90 <UART_SetConfig+0x208>
 8003c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c64:	d011      	beq.n	8003c8a <UART_SetConfig+0x202>
 8003c66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c6a:	d811      	bhi.n	8003c90 <UART_SetConfig+0x208>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x1f0>
 8003c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c74:	d006      	beq.n	8003c84 <UART_SetConfig+0x1fc>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x208>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e00d      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e00a      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e007      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e004      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e001      	b.n	8003c9a <UART_SetConfig+0x212>
 8003c96:	2310      	movs	r3, #16
 8003c98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca2:	d16b      	bne.n	8003d7c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d838      	bhi.n	8003d1c <UART_SetConfig+0x294>
 8003caa:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0x228>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003d1d 	.word	0x08003d1d
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7ff fba0 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	61b8      	str	r0, [r7, #24]
        break;
 8003cda:	e024      	b.n	8003d26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7ff fbbe 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8003ce0:	61b8      	str	r0, [r7, #24]
        break;
 8003ce2:	e020      	b.n	8003d26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <UART_SetConfig+0x290>)
 8003ce6:	61bb      	str	r3, [r7, #24]
        break;
 8003ce8:	e01d      	b.n	8003d26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7ff fb35 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003cee:	61b8      	str	r0, [r7, #24]
        break;
 8003cf0:	e019      	b.n	8003d26 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e015      	b.n	8003d26 <UART_SetConfig+0x29e>
 8003cfa:	bf00      	nop
 8003cfc:	efff69f3 	.word	0xefff69f3
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40004800 	.word	0x40004800
 8003d10:	40004c00 	.word	0x40004c00
 8003d14:	40005000 	.word	0x40005000
 8003d18:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	77bb      	strb	r3, [r7, #30]
        break;
 8003d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d073      	beq.n	8003e14 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	005a      	lsls	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	441a      	add	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d916      	bls.n	8003d76 <UART_SetConfig+0x2ee>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4e:	d212      	bcs.n	8003d76 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f023 030f 	bic.w	r3, r3, #15
 8003d58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	89fb      	ldrh	r3, [r7, #14]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	89fa      	ldrh	r2, [r7, #14]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	e04e      	b.n	8003e14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77bb      	strb	r3, [r7, #30]
 8003d7a:	e04b      	b.n	8003e14 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7c:	7ffb      	ldrb	r3, [r7, #31]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d827      	bhi.n	8003dd2 <UART_SetConfig+0x34a>
 8003d82:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <UART_SetConfig+0x300>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7ff fb34 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8003db0:	61b8      	str	r0, [r7, #24]
        break;
 8003db2:	e013      	b.n	8003ddc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db4:	f7ff fb52 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8003db8:	61b8      	str	r0, [r7, #24]
        break;
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <UART_SetConfig+0x3a4>)
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e00c      	b.n	8003ddc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc2:	f7ff fac9 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003dc6:	61b8      	str	r0, [r7, #24]
        break;
 8003dc8:	e008      	b.n	8003ddc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e004      	b.n	8003ddc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dda:	bf00      	nop
    }

    if (pclk != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085a      	lsrs	r2, r3, #1
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d909      	bls.n	8003e10 <UART_SetConfig+0x388>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d205      	bcs.n	8003e10 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e001      	b.n	8003e14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	007a1200 	.word	0x007a1200

08003e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f2e:	d10a      	bne.n	8003f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b098      	sub	sp, #96	@ 0x60
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f84:	f7fc fcd8 	bl	8000938 <HAL_GetTick>
 8003f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d12e      	bne.n	8003ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f88c 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d021      	beq.n	8003ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e6      	bne.n	8003fb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e062      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d149      	bne.n	8004098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f856 	bl	80040c4 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03c      	beq.n	8004098 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	623b      	str	r3, [r7, #32]
   return(result);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30
 800403e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004070:	61fa      	str	r2, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e011      	b.n	80040bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3758      	adds	r7, #88	@ 0x58
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	e04f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d04b      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fc fc2b 	bl	8000938 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e04e      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d037      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d034      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b40      	cmp	r3, #64	@ 0x40
 8004110:	d031      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d110      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f838 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2208      	movs	r2, #8
 8004132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e029      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d111      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f81e 	bl	800419e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	429a      	cmp	r2, r3
 8004192:	d0a0      	beq.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800419e:	b480      	push	{r7}
 80041a0:	b095      	sub	sp, #84	@ 0x54
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004210:	2b01      	cmp	r3, #1
 8004212:	d118      	bne.n	8004246 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	60bb      	str	r3, [r7, #8]
   return(result);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e6      	bne.n	8004214 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800425a:	bf00      	nop
 800425c:	3754      	adds	r7, #84	@ 0x54
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <siprintf>:
 8004268:	b40e      	push	{r1, r2, r3}
 800426a:	b510      	push	{r4, lr}
 800426c:	b09d      	sub	sp, #116	@ 0x74
 800426e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004270:	9002      	str	r0, [sp, #8]
 8004272:	9006      	str	r0, [sp, #24]
 8004274:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004278:	480a      	ldr	r0, [pc, #40]	@ (80042a4 <siprintf+0x3c>)
 800427a:	9107      	str	r1, [sp, #28]
 800427c:	9104      	str	r1, [sp, #16]
 800427e:	490a      	ldr	r1, [pc, #40]	@ (80042a8 <siprintf+0x40>)
 8004280:	f853 2b04 	ldr.w	r2, [r3], #4
 8004284:	9105      	str	r1, [sp, #20]
 8004286:	2400      	movs	r4, #0
 8004288:	a902      	add	r1, sp, #8
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004290:	f000 f994 	bl	80045bc <_svfiprintf_r>
 8004294:	9b02      	ldr	r3, [sp, #8]
 8004296:	701c      	strb	r4, [r3, #0]
 8004298:	b01d      	add	sp, #116	@ 0x74
 800429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800429e:	b003      	add	sp, #12
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	ffff0208 	.word	0xffff0208

080042ac <memset>:
 80042ac:	4402      	add	r2, r0
 80042ae:	4603      	mov	r3, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <__errno>:
 80042bc:	4b01      	ldr	r3, [pc, #4]	@ (80042c4 <__errno+0x8>)
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000000c 	.word	0x2000000c

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004300 <__libc_init_array+0x38>)
 80042cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004304 <__libc_init_array+0x3c>)
 80042ce:	1b64      	subs	r4, r4, r5
 80042d0:	10a4      	asrs	r4, r4, #2
 80042d2:	2600      	movs	r6, #0
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004308 <__libc_init_array+0x40>)
 80042da:	4c0c      	ldr	r4, [pc, #48]	@ (800430c <__libc_init_array+0x44>)
 80042dc:	f000 fc64 	bl	8004ba8 <_init>
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	2600      	movs	r6, #0
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f0:	4798      	blx	r3
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fa:	4798      	blx	r3
 80042fc:	3601      	adds	r6, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	08004c44 	.word	0x08004c44
 8004304:	08004c44 	.word	0x08004c44
 8004308:	08004c44 	.word	0x08004c44
 800430c:	08004c48 	.word	0x08004c48

08004310 <__retarget_lock_acquire_recursive>:
 8004310:	4770      	bx	lr

08004312 <__retarget_lock_release_recursive>:
 8004312:	4770      	bx	lr

08004314 <_free_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4605      	mov	r5, r0
 8004318:	2900      	cmp	r1, #0
 800431a:	d041      	beq.n	80043a0 <_free_r+0x8c>
 800431c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004320:	1f0c      	subs	r4, r1, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfb8      	it	lt
 8004326:	18e4      	addlt	r4, r4, r3
 8004328:	f000 f8e0 	bl	80044ec <__malloc_lock>
 800432c:	4a1d      	ldr	r2, [pc, #116]	@ (80043a4 <_free_r+0x90>)
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	b933      	cbnz	r3, 8004340 <_free_r+0x2c>
 8004332:	6063      	str	r3, [r4, #4]
 8004334:	6014      	str	r4, [r2, #0]
 8004336:	4628      	mov	r0, r5
 8004338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800433c:	f000 b8dc 	b.w	80044f8 <__malloc_unlock>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d908      	bls.n	8004356 <_free_r+0x42>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	1821      	adds	r1, r4, r0
 8004348:	428b      	cmp	r3, r1
 800434a:	bf01      	itttt	eq
 800434c:	6819      	ldreq	r1, [r3, #0]
 800434e:	685b      	ldreq	r3, [r3, #4]
 8004350:	1809      	addeq	r1, r1, r0
 8004352:	6021      	streq	r1, [r4, #0]
 8004354:	e7ed      	b.n	8004332 <_free_r+0x1e>
 8004356:	461a      	mov	r2, r3
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b10b      	cbz	r3, 8004360 <_free_r+0x4c>
 800435c:	42a3      	cmp	r3, r4
 800435e:	d9fa      	bls.n	8004356 <_free_r+0x42>
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	1850      	adds	r0, r2, r1
 8004364:	42a0      	cmp	r0, r4
 8004366:	d10b      	bne.n	8004380 <_free_r+0x6c>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	4401      	add	r1, r0
 800436c:	1850      	adds	r0, r2, r1
 800436e:	4283      	cmp	r3, r0
 8004370:	6011      	str	r1, [r2, #0]
 8004372:	d1e0      	bne.n	8004336 <_free_r+0x22>
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6053      	str	r3, [r2, #4]
 800437a:	4408      	add	r0, r1
 800437c:	6010      	str	r0, [r2, #0]
 800437e:	e7da      	b.n	8004336 <_free_r+0x22>
 8004380:	d902      	bls.n	8004388 <_free_r+0x74>
 8004382:	230c      	movs	r3, #12
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	e7d6      	b.n	8004336 <_free_r+0x22>
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	1821      	adds	r1, r4, r0
 800438c:	428b      	cmp	r3, r1
 800438e:	bf04      	itt	eq
 8004390:	6819      	ldreq	r1, [r3, #0]
 8004392:	685b      	ldreq	r3, [r3, #4]
 8004394:	6063      	str	r3, [r4, #4]
 8004396:	bf04      	itt	eq
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	6054      	str	r4, [r2, #4]
 800439e:	e7ca      	b.n	8004336 <_free_r+0x22>
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
 80043a2:	bf00      	nop
 80043a4:	200002b4 	.word	0x200002b4

080043a8 <sbrk_aligned>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4e0f      	ldr	r6, [pc, #60]	@ (80043e8 <sbrk_aligned+0x40>)
 80043ac:	460c      	mov	r4, r1
 80043ae:	6831      	ldr	r1, [r6, #0]
 80043b0:	4605      	mov	r5, r0
 80043b2:	b911      	cbnz	r1, 80043ba <sbrk_aligned+0x12>
 80043b4:	f000 fba4 	bl	8004b00 <_sbrk_r>
 80043b8:	6030      	str	r0, [r6, #0]
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 fb9f 	bl	8004b00 <_sbrk_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d103      	bne.n	80043ce <sbrk_aligned+0x26>
 80043c6:	f04f 34ff 	mov.w	r4, #4294967295
 80043ca:	4620      	mov	r0, r4
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
 80043ce:	1cc4      	adds	r4, r0, #3
 80043d0:	f024 0403 	bic.w	r4, r4, #3
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d0f8      	beq.n	80043ca <sbrk_aligned+0x22>
 80043d8:	1a21      	subs	r1, r4, r0
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 fb90 	bl	8004b00 <_sbrk_r>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d1f2      	bne.n	80043ca <sbrk_aligned+0x22>
 80043e4:	e7ef      	b.n	80043c6 <sbrk_aligned+0x1e>
 80043e6:	bf00      	nop
 80043e8:	200002b0 	.word	0x200002b0

080043ec <_malloc_r>:
 80043ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f0:	1ccd      	adds	r5, r1, #3
 80043f2:	f025 0503 	bic.w	r5, r5, #3
 80043f6:	3508      	adds	r5, #8
 80043f8:	2d0c      	cmp	r5, #12
 80043fa:	bf38      	it	cc
 80043fc:	250c      	movcc	r5, #12
 80043fe:	2d00      	cmp	r5, #0
 8004400:	4606      	mov	r6, r0
 8004402:	db01      	blt.n	8004408 <_malloc_r+0x1c>
 8004404:	42a9      	cmp	r1, r5
 8004406:	d904      	bls.n	8004412 <_malloc_r+0x26>
 8004408:	230c      	movs	r3, #12
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	2000      	movs	r0, #0
 800440e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044e8 <_malloc_r+0xfc>
 8004416:	f000 f869 	bl	80044ec <__malloc_lock>
 800441a:	f8d8 3000 	ldr.w	r3, [r8]
 800441e:	461c      	mov	r4, r3
 8004420:	bb44      	cbnz	r4, 8004474 <_malloc_r+0x88>
 8004422:	4629      	mov	r1, r5
 8004424:	4630      	mov	r0, r6
 8004426:	f7ff ffbf 	bl	80043a8 <sbrk_aligned>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	4604      	mov	r4, r0
 800442e:	d158      	bne.n	80044e2 <_malloc_r+0xf6>
 8004430:	f8d8 4000 	ldr.w	r4, [r8]
 8004434:	4627      	mov	r7, r4
 8004436:	2f00      	cmp	r7, #0
 8004438:	d143      	bne.n	80044c2 <_malloc_r+0xd6>
 800443a:	2c00      	cmp	r4, #0
 800443c:	d04b      	beq.n	80044d6 <_malloc_r+0xea>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	4639      	mov	r1, r7
 8004442:	4630      	mov	r0, r6
 8004444:	eb04 0903 	add.w	r9, r4, r3
 8004448:	f000 fb5a 	bl	8004b00 <_sbrk_r>
 800444c:	4581      	cmp	r9, r0
 800444e:	d142      	bne.n	80044d6 <_malloc_r+0xea>
 8004450:	6821      	ldr	r1, [r4, #0]
 8004452:	1a6d      	subs	r5, r5, r1
 8004454:	4629      	mov	r1, r5
 8004456:	4630      	mov	r0, r6
 8004458:	f7ff ffa6 	bl	80043a8 <sbrk_aligned>
 800445c:	3001      	adds	r0, #1
 800445e:	d03a      	beq.n	80044d6 <_malloc_r+0xea>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	442b      	add	r3, r5
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	f8d8 3000 	ldr.w	r3, [r8]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	bb62      	cbnz	r2, 80044c8 <_malloc_r+0xdc>
 800446e:	f8c8 7000 	str.w	r7, [r8]
 8004472:	e00f      	b.n	8004494 <_malloc_r+0xa8>
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	1b52      	subs	r2, r2, r5
 8004478:	d420      	bmi.n	80044bc <_malloc_r+0xd0>
 800447a:	2a0b      	cmp	r2, #11
 800447c:	d917      	bls.n	80044ae <_malloc_r+0xc2>
 800447e:	1961      	adds	r1, r4, r5
 8004480:	42a3      	cmp	r3, r4
 8004482:	6025      	str	r5, [r4, #0]
 8004484:	bf18      	it	ne
 8004486:	6059      	strne	r1, [r3, #4]
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	bf08      	it	eq
 800448c:	f8c8 1000 	streq.w	r1, [r8]
 8004490:	5162      	str	r2, [r4, r5]
 8004492:	604b      	str	r3, [r1, #4]
 8004494:	4630      	mov	r0, r6
 8004496:	f000 f82f 	bl	80044f8 <__malloc_unlock>
 800449a:	f104 000b 	add.w	r0, r4, #11
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	f020 0007 	bic.w	r0, r0, #7
 80044a4:	1ac2      	subs	r2, r0, r3
 80044a6:	bf1c      	itt	ne
 80044a8:	1a1b      	subne	r3, r3, r0
 80044aa:	50a3      	strne	r3, [r4, r2]
 80044ac:	e7af      	b.n	800440e <_malloc_r+0x22>
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	bf0c      	ite	eq
 80044b4:	f8c8 2000 	streq.w	r2, [r8]
 80044b8:	605a      	strne	r2, [r3, #4]
 80044ba:	e7eb      	b.n	8004494 <_malloc_r+0xa8>
 80044bc:	4623      	mov	r3, r4
 80044be:	6864      	ldr	r4, [r4, #4]
 80044c0:	e7ae      	b.n	8004420 <_malloc_r+0x34>
 80044c2:	463c      	mov	r4, r7
 80044c4:	687f      	ldr	r7, [r7, #4]
 80044c6:	e7b6      	b.n	8004436 <_malloc_r+0x4a>
 80044c8:	461a      	mov	r2, r3
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	d1fb      	bne.n	80044c8 <_malloc_r+0xdc>
 80044d0:	2300      	movs	r3, #0
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	e7de      	b.n	8004494 <_malloc_r+0xa8>
 80044d6:	230c      	movs	r3, #12
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	4630      	mov	r0, r6
 80044dc:	f000 f80c 	bl	80044f8 <__malloc_unlock>
 80044e0:	e794      	b.n	800440c <_malloc_r+0x20>
 80044e2:	6005      	str	r5, [r0, #0]
 80044e4:	e7d6      	b.n	8004494 <_malloc_r+0xa8>
 80044e6:	bf00      	nop
 80044e8:	200002b4 	.word	0x200002b4

080044ec <__malloc_lock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	@ (80044f4 <__malloc_lock+0x8>)
 80044ee:	f7ff bf0f 	b.w	8004310 <__retarget_lock_acquire_recursive>
 80044f2:	bf00      	nop
 80044f4:	200002ac 	.word	0x200002ac

080044f8 <__malloc_unlock>:
 80044f8:	4801      	ldr	r0, [pc, #4]	@ (8004500 <__malloc_unlock+0x8>)
 80044fa:	f7ff bf0a 	b.w	8004312 <__retarget_lock_release_recursive>
 80044fe:	bf00      	nop
 8004500:	200002ac 	.word	0x200002ac

08004504 <__ssputs_r>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	688e      	ldr	r6, [r1, #8]
 800450a:	461f      	mov	r7, r3
 800450c:	42be      	cmp	r6, r7
 800450e:	680b      	ldr	r3, [r1, #0]
 8004510:	4682      	mov	sl, r0
 8004512:	460c      	mov	r4, r1
 8004514:	4690      	mov	r8, r2
 8004516:	d82d      	bhi.n	8004574 <__ssputs_r+0x70>
 8004518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800451c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004520:	d026      	beq.n	8004570 <__ssputs_r+0x6c>
 8004522:	6965      	ldr	r5, [r4, #20]
 8004524:	6909      	ldr	r1, [r1, #16]
 8004526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800452a:	eba3 0901 	sub.w	r9, r3, r1
 800452e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004532:	1c7b      	adds	r3, r7, #1
 8004534:	444b      	add	r3, r9
 8004536:	106d      	asrs	r5, r5, #1
 8004538:	429d      	cmp	r5, r3
 800453a:	bf38      	it	cc
 800453c:	461d      	movcc	r5, r3
 800453e:	0553      	lsls	r3, r2, #21
 8004540:	d527      	bpl.n	8004592 <__ssputs_r+0x8e>
 8004542:	4629      	mov	r1, r5
 8004544:	f7ff ff52 	bl	80043ec <_malloc_r>
 8004548:	4606      	mov	r6, r0
 800454a:	b360      	cbz	r0, 80045a6 <__ssputs_r+0xa2>
 800454c:	6921      	ldr	r1, [r4, #16]
 800454e:	464a      	mov	r2, r9
 8004550:	f000 fae6 	bl	8004b20 <memcpy>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800455a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	6126      	str	r6, [r4, #16]
 8004562:	6165      	str	r5, [r4, #20]
 8004564:	444e      	add	r6, r9
 8004566:	eba5 0509 	sub.w	r5, r5, r9
 800456a:	6026      	str	r6, [r4, #0]
 800456c:	60a5      	str	r5, [r4, #8]
 800456e:	463e      	mov	r6, r7
 8004570:	42be      	cmp	r6, r7
 8004572:	d900      	bls.n	8004576 <__ssputs_r+0x72>
 8004574:	463e      	mov	r6, r7
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	4632      	mov	r2, r6
 800457a:	4641      	mov	r1, r8
 800457c:	f000 faa6 	bl	8004acc <memmove>
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	1b9b      	subs	r3, r3, r6
 8004584:	60a3      	str	r3, [r4, #8]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	4433      	add	r3, r6
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	2000      	movs	r0, #0
 800458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004592:	462a      	mov	r2, r5
 8004594:	f000 fad2 	bl	8004b3c <_realloc_r>
 8004598:	4606      	mov	r6, r0
 800459a:	2800      	cmp	r0, #0
 800459c:	d1e0      	bne.n	8004560 <__ssputs_r+0x5c>
 800459e:	6921      	ldr	r1, [r4, #16]
 80045a0:	4650      	mov	r0, sl
 80045a2:	f7ff feb7 	bl	8004314 <_free_r>
 80045a6:	230c      	movs	r3, #12
 80045a8:	f8ca 3000 	str.w	r3, [sl]
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	e7e9      	b.n	800458e <__ssputs_r+0x8a>
	...

080045bc <_svfiprintf_r>:
 80045bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	4698      	mov	r8, r3
 80045c2:	898b      	ldrh	r3, [r1, #12]
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	b09d      	sub	sp, #116	@ 0x74
 80045c8:	4607      	mov	r7, r0
 80045ca:	460d      	mov	r5, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	d510      	bpl.n	80045f2 <_svfiprintf_r+0x36>
 80045d0:	690b      	ldr	r3, [r1, #16]
 80045d2:	b973      	cbnz	r3, 80045f2 <_svfiprintf_r+0x36>
 80045d4:	2140      	movs	r1, #64	@ 0x40
 80045d6:	f7ff ff09 	bl	80043ec <_malloc_r>
 80045da:	6028      	str	r0, [r5, #0]
 80045dc:	6128      	str	r0, [r5, #16]
 80045de:	b930      	cbnz	r0, 80045ee <_svfiprintf_r+0x32>
 80045e0:	230c      	movs	r3, #12
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b01d      	add	sp, #116	@ 0x74
 80045ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	2340      	movs	r3, #64	@ 0x40
 80045f0:	616b      	str	r3, [r5, #20]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045f6:	2320      	movs	r3, #32
 80045f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004600:	2330      	movs	r3, #48	@ 0x30
 8004602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047a0 <_svfiprintf_r+0x1e4>
 8004606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800460a:	f04f 0901 	mov.w	r9, #1
 800460e:	4623      	mov	r3, r4
 8004610:	469a      	mov	sl, r3
 8004612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004616:	b10a      	cbz	r2, 800461c <_svfiprintf_r+0x60>
 8004618:	2a25      	cmp	r2, #37	@ 0x25
 800461a:	d1f9      	bne.n	8004610 <_svfiprintf_r+0x54>
 800461c:	ebba 0b04 	subs.w	fp, sl, r4
 8004620:	d00b      	beq.n	800463a <_svfiprintf_r+0x7e>
 8004622:	465b      	mov	r3, fp
 8004624:	4622      	mov	r2, r4
 8004626:	4629      	mov	r1, r5
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff ff6b 	bl	8004504 <__ssputs_r>
 800462e:	3001      	adds	r0, #1
 8004630:	f000 80a7 	beq.w	8004782 <_svfiprintf_r+0x1c6>
 8004634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004636:	445a      	add	r2, fp
 8004638:	9209      	str	r2, [sp, #36]	@ 0x24
 800463a:	f89a 3000 	ldrb.w	r3, [sl]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 809f 	beq.w	8004782 <_svfiprintf_r+0x1c6>
 8004644:	2300      	movs	r3, #0
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800464e:	f10a 0a01 	add.w	sl, sl, #1
 8004652:	9304      	str	r3, [sp, #16]
 8004654:	9307      	str	r3, [sp, #28]
 8004656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800465a:	931a      	str	r3, [sp, #104]	@ 0x68
 800465c:	4654      	mov	r4, sl
 800465e:	2205      	movs	r2, #5
 8004660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004664:	484e      	ldr	r0, [pc, #312]	@ (80047a0 <_svfiprintf_r+0x1e4>)
 8004666:	f7fb fdc3 	bl	80001f0 <memchr>
 800466a:	9a04      	ldr	r2, [sp, #16]
 800466c:	b9d8      	cbnz	r0, 80046a6 <_svfiprintf_r+0xea>
 800466e:	06d0      	lsls	r0, r2, #27
 8004670:	bf44      	itt	mi
 8004672:	2320      	movmi	r3, #32
 8004674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004678:	0711      	lsls	r1, r2, #28
 800467a:	bf44      	itt	mi
 800467c:	232b      	movmi	r3, #43	@ 0x2b
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004682:	f89a 3000 	ldrb.w	r3, [sl]
 8004686:	2b2a      	cmp	r3, #42	@ 0x2a
 8004688:	d015      	beq.n	80046b6 <_svfiprintf_r+0xfa>
 800468a:	9a07      	ldr	r2, [sp, #28]
 800468c:	4654      	mov	r4, sl
 800468e:	2000      	movs	r0, #0
 8004690:	f04f 0c0a 	mov.w	ip, #10
 8004694:	4621      	mov	r1, r4
 8004696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800469a:	3b30      	subs	r3, #48	@ 0x30
 800469c:	2b09      	cmp	r3, #9
 800469e:	d94b      	bls.n	8004738 <_svfiprintf_r+0x17c>
 80046a0:	b1b0      	cbz	r0, 80046d0 <_svfiprintf_r+0x114>
 80046a2:	9207      	str	r2, [sp, #28]
 80046a4:	e014      	b.n	80046d0 <_svfiprintf_r+0x114>
 80046a6:	eba0 0308 	sub.w	r3, r0, r8
 80046aa:	fa09 f303 	lsl.w	r3, r9, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	46a2      	mov	sl, r4
 80046b4:	e7d2      	b.n	800465c <_svfiprintf_r+0xa0>
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	1d19      	adds	r1, r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	9103      	str	r1, [sp, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfbb      	ittet	lt
 80046c2:	425b      	neglt	r3, r3
 80046c4:	f042 0202 	orrlt.w	r2, r2, #2
 80046c8:	9307      	strge	r3, [sp, #28]
 80046ca:	9307      	strlt	r3, [sp, #28]
 80046cc:	bfb8      	it	lt
 80046ce:	9204      	strlt	r2, [sp, #16]
 80046d0:	7823      	ldrb	r3, [r4, #0]
 80046d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80046d4:	d10a      	bne.n	80046ec <_svfiprintf_r+0x130>
 80046d6:	7863      	ldrb	r3, [r4, #1]
 80046d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046da:	d132      	bne.n	8004742 <_svfiprintf_r+0x186>
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	9203      	str	r2, [sp, #12]
 80046e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046e8:	3402      	adds	r4, #2
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047b0 <_svfiprintf_r+0x1f4>
 80046f0:	7821      	ldrb	r1, [r4, #0]
 80046f2:	2203      	movs	r2, #3
 80046f4:	4650      	mov	r0, sl
 80046f6:	f7fb fd7b 	bl	80001f0 <memchr>
 80046fa:	b138      	cbz	r0, 800470c <_svfiprintf_r+0x150>
 80046fc:	9b04      	ldr	r3, [sp, #16]
 80046fe:	eba0 000a 	sub.w	r0, r0, sl
 8004702:	2240      	movs	r2, #64	@ 0x40
 8004704:	4082      	lsls	r2, r0
 8004706:	4313      	orrs	r3, r2
 8004708:	3401      	adds	r4, #1
 800470a:	9304      	str	r3, [sp, #16]
 800470c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004710:	4824      	ldr	r0, [pc, #144]	@ (80047a4 <_svfiprintf_r+0x1e8>)
 8004712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004716:	2206      	movs	r2, #6
 8004718:	f7fb fd6a 	bl	80001f0 <memchr>
 800471c:	2800      	cmp	r0, #0
 800471e:	d036      	beq.n	800478e <_svfiprintf_r+0x1d2>
 8004720:	4b21      	ldr	r3, [pc, #132]	@ (80047a8 <_svfiprintf_r+0x1ec>)
 8004722:	bb1b      	cbnz	r3, 800476c <_svfiprintf_r+0x1b0>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	3307      	adds	r3, #7
 8004728:	f023 0307 	bic.w	r3, r3, #7
 800472c:	3308      	adds	r3, #8
 800472e:	9303      	str	r3, [sp, #12]
 8004730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004732:	4433      	add	r3, r6
 8004734:	9309      	str	r3, [sp, #36]	@ 0x24
 8004736:	e76a      	b.n	800460e <_svfiprintf_r+0x52>
 8004738:	fb0c 3202 	mla	r2, ip, r2, r3
 800473c:	460c      	mov	r4, r1
 800473e:	2001      	movs	r0, #1
 8004740:	e7a8      	b.n	8004694 <_svfiprintf_r+0xd8>
 8004742:	2300      	movs	r3, #0
 8004744:	3401      	adds	r4, #1
 8004746:	9305      	str	r3, [sp, #20]
 8004748:	4619      	mov	r1, r3
 800474a:	f04f 0c0a 	mov.w	ip, #10
 800474e:	4620      	mov	r0, r4
 8004750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004754:	3a30      	subs	r2, #48	@ 0x30
 8004756:	2a09      	cmp	r2, #9
 8004758:	d903      	bls.n	8004762 <_svfiprintf_r+0x1a6>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0c6      	beq.n	80046ec <_svfiprintf_r+0x130>
 800475e:	9105      	str	r1, [sp, #20]
 8004760:	e7c4      	b.n	80046ec <_svfiprintf_r+0x130>
 8004762:	fb0c 2101 	mla	r1, ip, r1, r2
 8004766:	4604      	mov	r4, r0
 8004768:	2301      	movs	r3, #1
 800476a:	e7f0      	b.n	800474e <_svfiprintf_r+0x192>
 800476c:	ab03      	add	r3, sp, #12
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	462a      	mov	r2, r5
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <_svfiprintf_r+0x1f0>)
 8004774:	a904      	add	r1, sp, #16
 8004776:	4638      	mov	r0, r7
 8004778:	f3af 8000 	nop.w
 800477c:	1c42      	adds	r2, r0, #1
 800477e:	4606      	mov	r6, r0
 8004780:	d1d6      	bne.n	8004730 <_svfiprintf_r+0x174>
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	065b      	lsls	r3, r3, #25
 8004786:	f53f af2d 	bmi.w	80045e4 <_svfiprintf_r+0x28>
 800478a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800478c:	e72c      	b.n	80045e8 <_svfiprintf_r+0x2c>
 800478e:	ab03      	add	r3, sp, #12
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	462a      	mov	r2, r5
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <_svfiprintf_r+0x1f0>)
 8004796:	a904      	add	r1, sp, #16
 8004798:	4638      	mov	r0, r7
 800479a:	f000 f879 	bl	8004890 <_printf_i>
 800479e:	e7ed      	b.n	800477c <_svfiprintf_r+0x1c0>
 80047a0:	08004c08 	.word	0x08004c08
 80047a4:	08004c12 	.word	0x08004c12
 80047a8:	00000000 	.word	0x00000000
 80047ac:	08004505 	.word	0x08004505
 80047b0:	08004c0e 	.word	0x08004c0e

080047b4 <_printf_common>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	4616      	mov	r6, r2
 80047ba:	4698      	mov	r8, r3
 80047bc:	688a      	ldr	r2, [r1, #8]
 80047be:	690b      	ldr	r3, [r1, #16]
 80047c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bfb8      	it	lt
 80047c8:	4613      	movlt	r3, r2
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047d0:	4607      	mov	r7, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	b10a      	cbz	r2, 80047da <_printf_common+0x26>
 80047d6:	3301      	adds	r3, #1
 80047d8:	6033      	str	r3, [r6, #0]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0699      	lsls	r1, r3, #26
 80047de:	bf42      	ittt	mi
 80047e0:	6833      	ldrmi	r3, [r6, #0]
 80047e2:	3302      	addmi	r3, #2
 80047e4:	6033      	strmi	r3, [r6, #0]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	f015 0506 	ands.w	r5, r5, #6
 80047ec:	d106      	bne.n	80047fc <_printf_common+0x48>
 80047ee:	f104 0a19 	add.w	sl, r4, #25
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	6832      	ldr	r2, [r6, #0]
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	dc26      	bgt.n	800484a <_printf_common+0x96>
 80047fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	3b00      	subs	r3, #0
 8004804:	bf18      	it	ne
 8004806:	2301      	movne	r3, #1
 8004808:	0692      	lsls	r2, r2, #26
 800480a:	d42b      	bmi.n	8004864 <_printf_common+0xb0>
 800480c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004810:	4641      	mov	r1, r8
 8004812:	4638      	mov	r0, r7
 8004814:	47c8      	blx	r9
 8004816:	3001      	adds	r0, #1
 8004818:	d01e      	beq.n	8004858 <_printf_common+0xa4>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	2b04      	cmp	r3, #4
 8004824:	bf02      	ittt	eq
 8004826:	68e5      	ldreq	r5, [r4, #12]
 8004828:	6833      	ldreq	r3, [r6, #0]
 800482a:	1aed      	subeq	r5, r5, r3
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	bf0c      	ite	eq
 8004830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004834:	2500      	movne	r5, #0
 8004836:	4293      	cmp	r3, r2
 8004838:	bfc4      	itt	gt
 800483a:	1a9b      	subgt	r3, r3, r2
 800483c:	18ed      	addgt	r5, r5, r3
 800483e:	2600      	movs	r6, #0
 8004840:	341a      	adds	r4, #26
 8004842:	42b5      	cmp	r5, r6
 8004844:	d11a      	bne.n	800487c <_printf_common+0xc8>
 8004846:	2000      	movs	r0, #0
 8004848:	e008      	b.n	800485c <_printf_common+0xa8>
 800484a:	2301      	movs	r3, #1
 800484c:	4652      	mov	r2, sl
 800484e:	4641      	mov	r1, r8
 8004850:	4638      	mov	r0, r7
 8004852:	47c8      	blx	r9
 8004854:	3001      	adds	r0, #1
 8004856:	d103      	bne.n	8004860 <_printf_common+0xac>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004860:	3501      	adds	r5, #1
 8004862:	e7c6      	b.n	80047f2 <_printf_common+0x3e>
 8004864:	18e1      	adds	r1, r4, r3
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	2030      	movs	r0, #48	@ 0x30
 800486a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800486e:	4422      	add	r2, r4
 8004870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004878:	3302      	adds	r3, #2
 800487a:	e7c7      	b.n	800480c <_printf_common+0x58>
 800487c:	2301      	movs	r3, #1
 800487e:	4622      	mov	r2, r4
 8004880:	4641      	mov	r1, r8
 8004882:	4638      	mov	r0, r7
 8004884:	47c8      	blx	r9
 8004886:	3001      	adds	r0, #1
 8004888:	d0e6      	beq.n	8004858 <_printf_common+0xa4>
 800488a:	3601      	adds	r6, #1
 800488c:	e7d9      	b.n	8004842 <_printf_common+0x8e>
	...

08004890 <_printf_i>:
 8004890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	7e0f      	ldrb	r7, [r1, #24]
 8004896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004898:	2f78      	cmp	r7, #120	@ 0x78
 800489a:	4691      	mov	r9, r2
 800489c:	4680      	mov	r8, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	469a      	mov	sl, r3
 80048a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048a6:	d807      	bhi.n	80048b8 <_printf_i+0x28>
 80048a8:	2f62      	cmp	r7, #98	@ 0x62
 80048aa:	d80a      	bhi.n	80048c2 <_printf_i+0x32>
 80048ac:	2f00      	cmp	r7, #0
 80048ae:	f000 80d1 	beq.w	8004a54 <_printf_i+0x1c4>
 80048b2:	2f58      	cmp	r7, #88	@ 0x58
 80048b4:	f000 80b8 	beq.w	8004a28 <_printf_i+0x198>
 80048b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048c0:	e03a      	b.n	8004938 <_printf_i+0xa8>
 80048c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048c6:	2b15      	cmp	r3, #21
 80048c8:	d8f6      	bhi.n	80048b8 <_printf_i+0x28>
 80048ca:	a101      	add	r1, pc, #4	@ (adr r1, 80048d0 <_printf_i+0x40>)
 80048cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048d0:	08004929 	.word	0x08004929
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	080048b9 	.word	0x080048b9
 80048dc:	080048b9 	.word	0x080048b9
 80048e0:	080048b9 	.word	0x080048b9
 80048e4:	080048b9 	.word	0x080048b9
 80048e8:	0800493d 	.word	0x0800493d
 80048ec:	080048b9 	.word	0x080048b9
 80048f0:	080048b9 	.word	0x080048b9
 80048f4:	080048b9 	.word	0x080048b9
 80048f8:	080048b9 	.word	0x080048b9
 80048fc:	08004a3b 	.word	0x08004a3b
 8004900:	08004967 	.word	0x08004967
 8004904:	080049f5 	.word	0x080049f5
 8004908:	080048b9 	.word	0x080048b9
 800490c:	080048b9 	.word	0x080048b9
 8004910:	08004a5d 	.word	0x08004a5d
 8004914:	080048b9 	.word	0x080048b9
 8004918:	08004967 	.word	0x08004967
 800491c:	080048b9 	.word	0x080048b9
 8004920:	080048b9 	.word	0x080048b9
 8004924:	080049fd 	.word	0x080049fd
 8004928:	6833      	ldr	r3, [r6, #0]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6032      	str	r2, [r6, #0]
 8004930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004938:	2301      	movs	r3, #1
 800493a:	e09c      	b.n	8004a76 <_printf_i+0x1e6>
 800493c:	6833      	ldr	r3, [r6, #0]
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	1d19      	adds	r1, r3, #4
 8004942:	6031      	str	r1, [r6, #0]
 8004944:	0606      	lsls	r6, r0, #24
 8004946:	d501      	bpl.n	800494c <_printf_i+0xbc>
 8004948:	681d      	ldr	r5, [r3, #0]
 800494a:	e003      	b.n	8004954 <_printf_i+0xc4>
 800494c:	0645      	lsls	r5, r0, #25
 800494e:	d5fb      	bpl.n	8004948 <_printf_i+0xb8>
 8004950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004954:	2d00      	cmp	r5, #0
 8004956:	da03      	bge.n	8004960 <_printf_i+0xd0>
 8004958:	232d      	movs	r3, #45	@ 0x2d
 800495a:	426d      	negs	r5, r5
 800495c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004960:	4858      	ldr	r0, [pc, #352]	@ (8004ac4 <_printf_i+0x234>)
 8004962:	230a      	movs	r3, #10
 8004964:	e011      	b.n	800498a <_printf_i+0xfa>
 8004966:	6821      	ldr	r1, [r4, #0]
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	0608      	lsls	r0, r1, #24
 800496c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004970:	d402      	bmi.n	8004978 <_printf_i+0xe8>
 8004972:	0649      	lsls	r1, r1, #25
 8004974:	bf48      	it	mi
 8004976:	b2ad      	uxthmi	r5, r5
 8004978:	2f6f      	cmp	r7, #111	@ 0x6f
 800497a:	4852      	ldr	r0, [pc, #328]	@ (8004ac4 <_printf_i+0x234>)
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	bf14      	ite	ne
 8004980:	230a      	movne	r3, #10
 8004982:	2308      	moveq	r3, #8
 8004984:	2100      	movs	r1, #0
 8004986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800498a:	6866      	ldr	r6, [r4, #4]
 800498c:	60a6      	str	r6, [r4, #8]
 800498e:	2e00      	cmp	r6, #0
 8004990:	db05      	blt.n	800499e <_printf_i+0x10e>
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	432e      	orrs	r6, r5
 8004996:	f021 0104 	bic.w	r1, r1, #4
 800499a:	6021      	str	r1, [r4, #0]
 800499c:	d04b      	beq.n	8004a36 <_printf_i+0x1a6>
 800499e:	4616      	mov	r6, r2
 80049a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80049a4:	fb03 5711 	mls	r7, r3, r1, r5
 80049a8:	5dc7      	ldrb	r7, [r0, r7]
 80049aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049ae:	462f      	mov	r7, r5
 80049b0:	42bb      	cmp	r3, r7
 80049b2:	460d      	mov	r5, r1
 80049b4:	d9f4      	bls.n	80049a0 <_printf_i+0x110>
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d10b      	bne.n	80049d2 <_printf_i+0x142>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	07df      	lsls	r7, r3, #31
 80049be:	d508      	bpl.n	80049d2 <_printf_i+0x142>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	6861      	ldr	r1, [r4, #4]
 80049c4:	4299      	cmp	r1, r3
 80049c6:	bfde      	ittt	le
 80049c8:	2330      	movle	r3, #48	@ 0x30
 80049ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049d2:	1b92      	subs	r2, r2, r6
 80049d4:	6122      	str	r2, [r4, #16]
 80049d6:	f8cd a000 	str.w	sl, [sp]
 80049da:	464b      	mov	r3, r9
 80049dc:	aa03      	add	r2, sp, #12
 80049de:	4621      	mov	r1, r4
 80049e0:	4640      	mov	r0, r8
 80049e2:	f7ff fee7 	bl	80047b4 <_printf_common>
 80049e6:	3001      	adds	r0, #1
 80049e8:	d14a      	bne.n	8004a80 <_printf_i+0x1f0>
 80049ea:	f04f 30ff 	mov.w	r0, #4294967295
 80049ee:	b004      	add	sp, #16
 80049f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	f043 0320 	orr.w	r3, r3, #32
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	4832      	ldr	r0, [pc, #200]	@ (8004ac8 <_printf_i+0x238>)
 80049fe:	2778      	movs	r7, #120	@ 0x78
 8004a00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	6831      	ldr	r1, [r6, #0]
 8004a08:	061f      	lsls	r7, r3, #24
 8004a0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a0e:	d402      	bmi.n	8004a16 <_printf_i+0x186>
 8004a10:	065f      	lsls	r7, r3, #25
 8004a12:	bf48      	it	mi
 8004a14:	b2ad      	uxthmi	r5, r5
 8004a16:	6031      	str	r1, [r6, #0]
 8004a18:	07d9      	lsls	r1, r3, #31
 8004a1a:	bf44      	itt	mi
 8004a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a20:	6023      	strmi	r3, [r4, #0]
 8004a22:	b11d      	cbz	r5, 8004a2c <_printf_i+0x19c>
 8004a24:	2310      	movs	r3, #16
 8004a26:	e7ad      	b.n	8004984 <_printf_i+0xf4>
 8004a28:	4826      	ldr	r0, [pc, #152]	@ (8004ac4 <_printf_i+0x234>)
 8004a2a:	e7e9      	b.n	8004a00 <_printf_i+0x170>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	e7f6      	b.n	8004a24 <_printf_i+0x194>
 8004a36:	4616      	mov	r6, r2
 8004a38:	e7bd      	b.n	80049b6 <_printf_i+0x126>
 8004a3a:	6833      	ldr	r3, [r6, #0]
 8004a3c:	6825      	ldr	r5, [r4, #0]
 8004a3e:	6961      	ldr	r1, [r4, #20]
 8004a40:	1d18      	adds	r0, r3, #4
 8004a42:	6030      	str	r0, [r6, #0]
 8004a44:	062e      	lsls	r6, r5, #24
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	d501      	bpl.n	8004a4e <_printf_i+0x1be>
 8004a4a:	6019      	str	r1, [r3, #0]
 8004a4c:	e002      	b.n	8004a54 <_printf_i+0x1c4>
 8004a4e:	0668      	lsls	r0, r5, #25
 8004a50:	d5fb      	bpl.n	8004a4a <_printf_i+0x1ba>
 8004a52:	8019      	strh	r1, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	4616      	mov	r6, r2
 8004a5a:	e7bc      	b.n	80049d6 <_printf_i+0x146>
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	6032      	str	r2, [r6, #0]
 8004a62:	681e      	ldr	r6, [r3, #0]
 8004a64:	6862      	ldr	r2, [r4, #4]
 8004a66:	2100      	movs	r1, #0
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f7fb fbc1 	bl	80001f0 <memchr>
 8004a6e:	b108      	cbz	r0, 8004a74 <_printf_i+0x1e4>
 8004a70:	1b80      	subs	r0, r0, r6
 8004a72:	6060      	str	r0, [r4, #4]
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a7e:	e7aa      	b.n	80049d6 <_printf_i+0x146>
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	4632      	mov	r2, r6
 8004a84:	4649      	mov	r1, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	47d0      	blx	sl
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d0ad      	beq.n	80049ea <_printf_i+0x15a>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	079b      	lsls	r3, r3, #30
 8004a92:	d413      	bmi.n	8004abc <_printf_i+0x22c>
 8004a94:	68e0      	ldr	r0, [r4, #12]
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	4298      	cmp	r0, r3
 8004a9a:	bfb8      	it	lt
 8004a9c:	4618      	movlt	r0, r3
 8004a9e:	e7a6      	b.n	80049ee <_printf_i+0x15e>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	47d0      	blx	sl
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d09d      	beq.n	80049ea <_printf_i+0x15a>
 8004aae:	3501      	adds	r5, #1
 8004ab0:	68e3      	ldr	r3, [r4, #12]
 8004ab2:	9903      	ldr	r1, [sp, #12]
 8004ab4:	1a5b      	subs	r3, r3, r1
 8004ab6:	42ab      	cmp	r3, r5
 8004ab8:	dcf2      	bgt.n	8004aa0 <_printf_i+0x210>
 8004aba:	e7eb      	b.n	8004a94 <_printf_i+0x204>
 8004abc:	2500      	movs	r5, #0
 8004abe:	f104 0619 	add.w	r6, r4, #25
 8004ac2:	e7f5      	b.n	8004ab0 <_printf_i+0x220>
 8004ac4:	08004c19 	.word	0x08004c19
 8004ac8:	08004c2a 	.word	0x08004c2a

08004acc <memmove>:
 8004acc:	4288      	cmp	r0, r1
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	eb01 0402 	add.w	r4, r1, r2
 8004ad4:	d902      	bls.n	8004adc <memmove+0x10>
 8004ad6:	4284      	cmp	r4, r0
 8004ad8:	4623      	mov	r3, r4
 8004ada:	d807      	bhi.n	8004aec <memmove+0x20>
 8004adc:	1e43      	subs	r3, r0, #1
 8004ade:	42a1      	cmp	r1, r4
 8004ae0:	d008      	beq.n	8004af4 <memmove+0x28>
 8004ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aea:	e7f8      	b.n	8004ade <memmove+0x12>
 8004aec:	4402      	add	r2, r0
 8004aee:	4601      	mov	r1, r0
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d100      	bne.n	8004af6 <memmove+0x2a>
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004afe:	e7f7      	b.n	8004af0 <memmove+0x24>

08004b00 <_sbrk_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d06      	ldr	r5, [pc, #24]	@ (8004b1c <_sbrk_r+0x1c>)
 8004b04:	2300      	movs	r3, #0
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	f7fb fe48 	bl	80007a0 <_sbrk>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_sbrk_r+0x1a>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_sbrk_r+0x1a>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	200002a8 	.word	0x200002a8

08004b20 <memcpy>:
 8004b20:	440a      	add	r2, r1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xc>
 8004b2a:	4770      	bx	lr
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b36:	4291      	cmp	r1, r2
 8004b38:	d1f9      	bne.n	8004b2e <memcpy+0xe>
 8004b3a:	bd10      	pop	{r4, pc}

08004b3c <_realloc_r>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	4607      	mov	r7, r0
 8004b42:	4614      	mov	r4, r2
 8004b44:	460d      	mov	r5, r1
 8004b46:	b921      	cbnz	r1, 8004b52 <_realloc_r+0x16>
 8004b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f7ff bc4d 	b.w	80043ec <_malloc_r>
 8004b52:	b92a      	cbnz	r2, 8004b60 <_realloc_r+0x24>
 8004b54:	f7ff fbde 	bl	8004314 <_free_r>
 8004b58:	4625      	mov	r5, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b60:	f000 f81a 	bl	8004b98 <_malloc_usable_size_r>
 8004b64:	4284      	cmp	r4, r0
 8004b66:	4606      	mov	r6, r0
 8004b68:	d802      	bhi.n	8004b70 <_realloc_r+0x34>
 8004b6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b6e:	d8f4      	bhi.n	8004b5a <_realloc_r+0x1e>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4638      	mov	r0, r7
 8004b74:	f7ff fc3a 	bl	80043ec <_malloc_r>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	b908      	cbnz	r0, 8004b80 <_realloc_r+0x44>
 8004b7c:	4645      	mov	r5, r8
 8004b7e:	e7ec      	b.n	8004b5a <_realloc_r+0x1e>
 8004b80:	42b4      	cmp	r4, r6
 8004b82:	4622      	mov	r2, r4
 8004b84:	4629      	mov	r1, r5
 8004b86:	bf28      	it	cs
 8004b88:	4632      	movcs	r2, r6
 8004b8a:	f7ff ffc9 	bl	8004b20 <memcpy>
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff fbbf 	bl	8004314 <_free_r>
 8004b96:	e7f1      	b.n	8004b7c <_realloc_r+0x40>

08004b98 <_malloc_usable_size_r>:
 8004b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9c:	1f18      	subs	r0, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfbc      	itt	lt
 8004ba2:	580b      	ldrlt	r3, [r1, r0]
 8004ba4:	18c0      	addlt	r0, r0, r3
 8004ba6:	4770      	bx	lr

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
